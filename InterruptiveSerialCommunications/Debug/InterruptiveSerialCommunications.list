
InterruptiveSerialCommunications.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009668  08009668  00019668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a8  080096a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b0  080096b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080096b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080096c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080096c4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f032  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be9  00000000  00000000  0002f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ca  00000000  00000000  000316b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f4bb  00000000  00000000  00031e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5c8  00000000  00000000  0006133d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012b892  00000000  00000000  0006f905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002970  00000000  00000000  0019b198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0019db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08009650 	.word	0x08009650

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08009650 	.word	0x08009650

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HAL_UART_Transmit_IT(&huart3, receivedData, 2);
 80005b4:	2202      	movs	r2, #2
 80005b6:	491a      	ldr	r1, [pc, #104]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005b8:	481a      	ldr	r0, [pc, #104]	; (8000624 <HAL_UART_RxCpltCallback+0x78>)
 80005ba:	f006 febb 	bl	8007334 <HAL_UART_Transmit_IT>

	GPIO_PinState state = GPIO_PIN_SET;
 80005be:	2301      	movs	r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]

	if (receivedData[1] == '0')
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	2b30      	cmp	r3, #48	; 0x30
 80005c8:	d101      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x22>
		state = GPIO_PIN_RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]

	if (receivedData[0] == 'R')
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b52      	cmp	r3, #82	; 0x52
 80005d4:	d106      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x38>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	461a      	mov	r2, r3
 80005da:	2110      	movs	r1, #16
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <HAL_UART_RxCpltCallback+0x7c>)
 80005de:	f000 fe75 	bl	80012cc <HAL_GPIO_WritePin>
 80005e2:	e014      	b.n	800060e <HAL_UART_RxCpltCallback+0x62>
	else if (receivedData[0] == 'G')
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b47      	cmp	r3, #71	; 0x47
 80005ea:	d106      	bne.n	80005fa <HAL_UART_RxCpltCallback+0x4e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2101      	movs	r1, #1
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <HAL_UART_RxCpltCallback+0x80>)
 80005f4:	f000 fe6a 	bl	80012cc <HAL_GPIO_WritePin>
 80005f8:	e009      	b.n	800060e <HAL_UART_RxCpltCallback+0x62>
	else if (receivedData[0] == 'Y')
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b59      	cmp	r3, #89	; 0x59
 8000600:	d105      	bne.n	800060e <HAL_UART_RxCpltCallback+0x62>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	461a      	mov	r2, r3
 8000606:	2110      	movs	r1, #16
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_UART_RxCpltCallback+0x84>)
 800060a:	f000 fe5f 	bl	80012cc <HAL_GPIO_WritePin>

	HAL_UART_Receive_IT(&huart3, receivedData, 2);
 800060e:	2202      	movs	r2, #2
 8000610:	4903      	ldr	r1, [pc, #12]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <HAL_UART_RxCpltCallback+0x78>)
 8000614:	f006 ff32 	bl	800747c <HAL_UART_Receive_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000bc 	.word	0x200000bc
 8000624:	20000028 	.word	0x20000028
 8000628:	42021800 	.word	0x42021800
 800062c:	42020400 	.word	0x42020400
 8000630:	42021400 	.word	0x42021400

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fac6 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f810 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8ba 	bl	80007b8 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 8000644:	f000 f864 	bl	8000710 <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 8000648:	f000 f86a 	bl	8000720 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, receivedData, 2);
 800064c:	2202      	movs	r2, #2
 800064e:	4902      	ldr	r1, [pc, #8]	; (8000658 <main+0x24>)
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <main+0x28>)
 8000652:	f006 ff13 	bl	800747c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x22>
 8000658:	200000bc 	.word	0x200000bc
 800065c:	20000028 	.word	0x20000028

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2250      	movs	r2, #80	; 0x50
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f008 ffc2 	bl	80095f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <SystemClock_Config+0xac>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xac>)
 800068c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000690:	6113      	str	r3, [r2, #16]
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemClock_Config+0xac>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069e:	bf00      	nop
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <SystemClock_Config+0xac>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d1f9      	bne.n	80006a0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80006b4:	2308      	movs	r3, #8
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe19 	bl	80012fc <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006d0:	f000 f8fe 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	231f      	movs	r3, #31
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fa3a 	bl	8001b6c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fe:	f000 f8e7 	bl	80008d0 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3770      	adds	r7, #112	; 0x70
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	44020800 	.word	0x44020800

08000710 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <MX_USART3_UART_Init+0x94>)
 8000728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800076a:	f006 fd93 	bl	8007294 <HAL_UART_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000774:	f000 f8ac 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800077c:	f008 fe71 	bl	8009462 <HAL_UARTEx_SetTxFifoThreshold>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000786:	f000 f8a3 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800078e:	f008 fea6 	bl	80094de <HAL_UARTEx_SetRxFifoThreshold>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000798:	f000 f89a 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800079e:	f008 fe27 	bl	80093f0 <HAL_UARTEx_DisableFifoMode>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f892 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000028 	.word	0x20000028
 80007b4:	40004800 	.word	0x40004800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d4:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007d6:	f043 0320 	orr.w	r3, r3, #32
 80007da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f2:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007fc:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0x108>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_GPIO_Init+0x108>)
 800081c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <MX_GPIO_Init+0x108>)
 800082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800082e:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_GPIO_Init+0x108>)
 800083a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800083e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2110      	movs	r1, #16
 800084a:	481e      	ldr	r0, [pc, #120]	; (80008c4 <MX_GPIO_Init+0x10c>)
 800084c:	f000 fd3e 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	481c      	ldr	r0, [pc, #112]	; (80008c8 <MX_GPIO_Init+0x110>)
 8000856:	f000 fd39 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2110      	movs	r1, #16
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <MX_GPIO_Init+0x114>)
 8000860:	f000 fd34 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <MX_GPIO_Init+0x10c>)
 800087c:	f000 fbd4 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000880:	2301      	movs	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_GPIO_Init+0x110>)
 8000898:	f000 fbc6 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800089c:	2310      	movs	r3, #16
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_GPIO_Init+0x114>)
 80008b4:	f000 fbb8 	bl	8001028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	44020c00 	.word	0x44020c00
 80008c4:	42021400 	.word	0x42021400
 80008c8:	42020400 	.word	0x42020400
 80008cc:	42021800 	.word	0x42021800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>

080008da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0cc      	sub	sp, #304	; 0x130
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80008f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800090c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000910:	4618      	mov	r0, r3
 8000912:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000916:	461a      	mov	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f008 fe6d 	bl	80095f8 <memset>
  if(huart->Instance==USART3)
 800091e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <HAL_UART_MspInit+0x120>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d165      	bne.n	80009fc <HAL_UART_MspInit+0x114>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000934:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000938:	f04f 0204 	mov.w	r2, #4
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000948:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800094c:	2200      	movs	r2, #0
 800094e:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fc4b 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000960:	f7ff ffb6 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <HAL_UART_MspInit+0x124>)
 8000966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800096a:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <HAL_UART_MspInit+0x124>)
 800096c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000970:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <HAL_UART_MspInit+0x124>)
 8000976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800097a:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 800097e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000982:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800098c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000990:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <HAL_UART_MspInit+0x124>)
 8000994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <HAL_UART_MspInit+0x124>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_UART_MspInit+0x124>)
 80009a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a8:	f003 0208 	and.w	r2, r3, #8
 80009ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009be:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009da:	2307      	movs	r3, #7
 80009dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80009e4:	4619      	mov	r1, r3
 80009e6:	480a      	ldr	r0, [pc, #40]	; (8000a10 <HAL_UART_MspInit+0x128>)
 80009e8:	f000 fb1e 	bl	8001028 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	203c      	movs	r0, #60	; 0x3c
 80009f2:	f000 fa40 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009f6:	203c      	movs	r0, #60	; 0x3c
 80009f8:	f000 fa57 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004800 	.word	0x40004800
 8000a0c:	44020c00 	.word	0x44020c00
 8000a10:	42020c00 	.word	0x42020c00

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 f90e 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART3_IRQHandler+0x10>)
 8000a6e:	f006 fd67 	bl	8007540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000028 	.word	0x20000028

08000a7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a82:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <SystemInit+0xdc>)
 8000a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a88:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <SystemInit+0xdc>)
 8000a8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a92:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <SystemInit+0xe0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <SystemInit+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <SystemInit+0xe0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <SystemInit+0xe0>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	492c      	ldr	r1, [pc, #176]	; (8000b5c <SystemInit+0xe0>)
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <SystemInit+0xe4>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <SystemInit+0xe0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <SystemInit+0xe0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <SystemInit+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemInit+0xe0>)
 8000ac4:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <SystemInit+0xe8>)
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <SystemInit+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SystemInit+0xe0>)
 8000ad0:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <SystemInit+0xe8>)
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <SystemInit+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <SystemInit+0xe0>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <SystemInit+0xe8>)
 8000ade:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <SystemInit+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <SystemInit+0xe0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <SystemInit+0xe0>)
 8000aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <SystemInit+0xe0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemInit+0xdc>)
 8000afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afe:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <SystemInit+0xec>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000b08:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000b10:	d003      	beq.n	8000b1a <SystemInit+0x9e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000b18:	d117      	bne.n	8000b4a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <SystemInit+0xec>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d005      	beq.n	8000b32 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <SystemInit+0xec>)
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <SystemInit+0xf0>)
 8000b2a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <SystemInit+0xec>)
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <SystemInit+0xf4>)
 8000b30:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <SystemInit+0xec>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <SystemInit+0xec>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <SystemInit+0xec>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <SystemInit+0xec>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	61d3      	str	r3, [r2, #28]
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	44020c00 	.word	0x44020c00
 8000b60:	eae2eae3 	.word	0xeae2eae3
 8000b64:	01010280 	.word	0x01010280
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	08192a3b 	.word	0x08192a3b
 8000b70:	4c5d6e7f 	.word	0x4c5d6e7f

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b78:	f7ff ff80 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ba2:	f008 fd31 	bl	8009608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba6:	f7ff fd45 	bl	8000634 <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb8:	080096b8 	.word	0x080096b8
  ldr r2, =_sbss
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc0:	200000c4 	.word	0x200000c4

08000bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f947 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000bd2:	f001 f983 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x40>)
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	490a      	ldr	r1, [pc, #40]	; (8000c0c <HAL_Init+0x44>)
 8000be2:	5ccb      	ldrb	r3, [r1, r3]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_Init+0x48>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bec:	200f      	movs	r0, #15
 8000bee:	f000 f811 	bl	8000c14 <HAL_InitTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e002      	b.n	8000c02 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe6d 	bl	80008da <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	44020c00 	.word	0x44020c00
 8000c0c:	08009668 	.word	0x08009668
 8000c10:	20000000 	.word	0x20000000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_InitTick+0x60>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e021      	b.n	8000c6c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_InitTick+0x64>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_InitTick+0x60>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f941 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 f90b 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x68>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	200000c0 	.word	0x200000c0

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200000c0 	.word	0x200000c0

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff40 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff90 	bl	8000db4 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5f 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa4 	bl	8000e1c <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8000ee6:	f7ff fedf 	bl	8000ca8 <HAL_GetTick>
 8000eea:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e06b      	b.n	8000fce <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d008      	beq.n	8000f14 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2220      	movs	r2, #32
 8000f06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e05c      	b.n	8000fce <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0204 	orr.w	r2, r2, #4
 8000f22:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2205      	movs	r2, #5
 8000f28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000f2c:	e020      	b.n	8000f70 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8000f2e:	f7ff febb 	bl	8000ca8 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d919      	bls.n	8000f70 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	f043 0210 	orr.w	r2, r3, #16
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f60:	2201      	movs	r2, #1
 8000f62:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e02e      	b.n	8000fce <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0d7      	beq.n	8000f2e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0202 	orr.w	r2, r2, #2
 8000f8c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2204      	movs	r2, #4
 8000f92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000f9e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d007      	beq.n	8000fc4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fb8:	2201      	movs	r2, #1
 8000fba:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e019      	b.n	800101c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d004      	beq.n	8000ffe <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2204      	movs	r2, #4
 8001002:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001036:	e136      	b.n	80012a6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8128 	beq.w	80012a0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x38>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d125      	bne.n	80010ac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	f003 020f 	and.w	r2, r3, #15
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	4313      	orrs	r3, r2
 800109c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0xd8>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4313      	orrs	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	4013      	ands	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d017      	beq.n	800119a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	4013      	ands	r3, r2
 8001180:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d07c      	beq.n	80012a0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011a6:	4a47      	ldr	r2, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3318      	adds	r3, #24
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4013      	ands	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0a9a      	lsrs	r2, r3, #10
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_GPIO_Init+0x2a0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	f002 0203 	and.w	r2, r2, #3
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	4093      	lsls	r3, r2
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4313      	orrs	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011e2:	4938      	ldr	r1, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3318      	adds	r3, #24
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011f0:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800123e:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 8001246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800124a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4013      	ands	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 8001274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001278:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	3301      	adds	r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f aec1 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	44022000 	.word	0x44022000
 80012c8:	002f7f7f 	.word	0x002f7f7f

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f000 bc28 	b.w	8001b60 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001310:	4b94      	ldr	r3, [pc, #592]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f003 0318 	and.w	r3, r3, #24
 8001318:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800131a:	4b92      	ldr	r3, [pc, #584]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x46>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b18      	cmp	r3, #24
 800133a:	d114      	bne.n	8001366 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d111      	bne.n	8001366 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f000 bc08 	b.w	8001b60 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	4981      	ldr	r1, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001360:	4313      	orrs	r3, r2
 8001362:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001364:	e040      	b.n	80013e8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d023      	beq.n	80013b6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800136e:	4b7d      	ldr	r3, [pc, #500]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7c      	ldr	r2, [pc, #496]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fc95 	bl	8000ca8 <HAL_GetTick>
 800137e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001382:	f7ff fc91 	bl	8000ca8 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e3e5      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001394:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80013a0:	4b70      	ldr	r3, [pc, #448]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	496d      	ldr	r1, [pc, #436]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	618b      	str	r3, [r1, #24]
 80013b4:	e018      	b.n	80013e8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6a      	ldr	r2, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc71 	bl	8000ca8 <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc6d 	bl	8000ca8 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e3c1      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80013dc:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a0 	beq.w	8001536 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2b10      	cmp	r3, #16
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x10c>
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b18      	cmp	r3, #24
 8001400:	d109      	bne.n	8001416 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8092 	bne.w	8001536 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e3a4      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x132>
 8001420:	4b50      	ldr	r3, [pc, #320]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e058      	b.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d112      	bne.n	800145c <HAL_RCC_OscConfig+0x160>
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a4a      	ldr	r2, [pc, #296]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 800143c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001448:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a44      	ldr	r2, [pc, #272]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e041      	b.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x190>
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001478:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e029      	b.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x1c0>
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e011      	b.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 80014da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fbde 	bl	8000ca8 <HAL_GetTick>
 80014ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbda 	bl	8000ca8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e32e      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1f4>
 800150e:	e012      	b.n	8001536 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbca 	bl	8000ca8 <HAL_GetTick>
 8001514:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001518:	f7ff fbc6 	bl	8000ca8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e31a      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x268>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 809a 	beq.w	8001678 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x25a>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2b18      	cmp	r3, #24
 800154e:	d149      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d146      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e2fe      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
 8001562:	bf00      	nop
 8001564:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800156e:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0218 	and.w	r2, r3, #24
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	429a      	cmp	r2, r3
 800157c:	d014      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800157e:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0218 	bic.w	r2, r3, #24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4993      	ldr	r1, [pc, #588]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001590:	f000 fdd0 	bl	8002134 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001594:	4b91      	ldr	r3, [pc, #580]	; (80017dc <HAL_RCC_OscConfig+0x4e0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fb3b 	bl	8000c14 <HAL_InitTick>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e2db      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb7e 	bl	8000ca8 <HAL_GetTick>
 80015ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb7a 	bl	8000ca8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e2ce      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c2:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80015ce:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	041b      	lsls	r3, r3, #16
 80015dc:	497e      	ldr	r1, [pc, #504]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80015e2:	e049      	b.n	8001678 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d02c      	beq.n	8001646 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80015ec:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 0218 	bic.w	r2, r3, #24
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	4977      	ldr	r1, [pc, #476]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a75      	ldr	r2, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb4d 	bl	8000ca8 <HAL_GetTick>
 800160e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb49 	bl	8000ca8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e29d      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b6c      	ldr	r3, [pc, #432]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001630:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	4966      	ldr	r1, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001640:	4313      	orrs	r3, r2
 8001642:	610b      	str	r3, [r1, #16]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a63      	ldr	r2, [pc, #396]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fb29 	bl	8000ca8 <HAL_GetTick>
 8001656:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800165a:	f7ff fb25 	bl	8000ca8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e279      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b52      	ldr	r3, [pc, #328]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800168e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001692:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb04 	bl	8000ca8 <HAL_GetTick>
 80016a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb00 	bl	8000ca8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e254      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016b6:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80016b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3a8>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016cc:	4a42      	ldr	r2, [pc, #264]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80016ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fae7 	bl	8000ca8 <HAL_GetTick>
 80016da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016de:	f7ff fae3 	bl	8000ca8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e237      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80016f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80d2 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x4e4>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d118      	bne.n	800174a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x4e4>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <HAL_RCC_OscConfig+0x4e4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001724:	f7ff fac0 	bl	8000ca8 <HAL_GetTick>
 8001728:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172c:	f7ff fabc 	bl	8000ca8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e210      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_OscConfig+0x4e4>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_RCC_OscConfig+0x468>
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001762:	e074      	b.n	800184e <HAL_RCC_OscConfig+0x552>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d118      	bne.n	800179e <HAL_RCC_OscConfig+0x4a2>
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800176e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001772:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800177e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001788:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 800178e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800179c:	e057      	b.n	800184e <HAL_RCC_OscConfig+0x552>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d11e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x4e8>
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80017a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80017b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80017be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80017c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017cc:	4a02      	ldr	r2, [pc, #8]	; (80017d8 <HAL_RCC_OscConfig+0x4dc>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x552>
 80017d8:	44020c00 	.word	0x44020c00
 80017dc:	20000004 	.word	0x20000004
 80017e0:	44020800 	.word	0x44020800
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b85      	cmp	r3, #133	; 0x85
 80017ea:	d118      	bne.n	800181e <HAL_RCC_OscConfig+0x522>
 80017ec:	4ba2      	ldr	r3, [pc, #648]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80017ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017f2:	4aa1      	ldr	r2, [pc, #644]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017fc:	4b9e      	ldr	r3, [pc, #632]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80017fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001802:	4a9d      	ldr	r2, [pc, #628]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800180c:	4b9a      	ldr	r3, [pc, #616]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 800180e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001812:	4a99      	ldr	r2, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800181c:	e017      	b.n	800184e <HAL_RCC_OscConfig+0x552>
 800181e:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001824:	4a94      	ldr	r2, [pc, #592]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800182e:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001834:	4a90      	ldr	r2, [pc, #576]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001844:	4a8c      	ldr	r2, [pc, #560]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800184a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fa27 	bl	8000ca8 <HAL_GetTick>
 800185a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fa23 	bl	8000ca8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e175      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001874:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ed      	beq.n	800185e <HAL_RCC_OscConfig+0x562>
 8001882:	e015      	b.n	80018b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff fa10 	bl	8000ca8 <HAL_GetTick>
 8001888:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff fa0c 	bl	8000ca8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e15e      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a2:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80018a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ed      	bne.n	800188c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d036      	beq.n	800192a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d019      	beq.n	80018f8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018c4:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6b      	ldr	r2, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80018ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff f9ea 	bl	8000ca8 <HAL_GetTick>
 80018d4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80018d8:	f7ff f9e6 	bl	8000ca8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e13a      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x5dc>
 80018f6:	e018      	b.n	800192a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018f8:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5e      	ldr	r2, [pc, #376]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80018fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f9d0 	bl	8000ca8 <HAL_GetTick>
 8001908:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800190c:	f7ff f9cc 	bl	8000ca8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e120      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8115 	beq.w	8001b5e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b18      	cmp	r3, #24
 8001938:	f000 80af 	beq.w	8001a9a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2b02      	cmp	r3, #2
 8001942:	f040 8086 	bne.w	8001a52 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 800194c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f9a9 	bl	8000ca8 <HAL_GetTick>
 8001956:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800195a:	f7ff f9a5 	bl	8000ca8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0f9      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800196c:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001980:	f023 0303 	bic.w	r3, r3, #3
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800198c:	0212      	lsls	r2, r2, #8
 800198e:	430a      	orrs	r2, r1
 8001990:	4939      	ldr	r1, [pc, #228]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001992:	4313      	orrs	r3, r2
 8001994:	628b      	str	r3, [r1, #40]	; 0x28
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	3b01      	subs	r3, #1
 800199c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a4:	3b01      	subs	r3, #1
 80019a6:	025b      	lsls	r3, r3, #9
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	3b01      	subs	r3, #1
 80019b2:	041b      	lsls	r3, r3, #16
 80019b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	3b01      	subs	r3, #1
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019c6:	492c      	ldr	r1, [pc, #176]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019d2:	f023 0310 	bic.w	r3, r3, #16
 80019d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f023 020c 	bic.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	491f      	ldr	r1, [pc, #124]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f023 0220 	bic.w	r2, r3, #32
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0c:	491a      	ldr	r1, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f93d 	bl	8000ca8 <HAL_GetTick>
 8001a2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f939 	bl	8000ca8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e08d      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x736>
 8001a50:	e085      	b.n	8001b5e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_RCC_OscConfig+0x77c>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f923 	bl	8000ca8 <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f91f 	bl	8000ca8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d903      	bls.n	8001a7c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e073      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
 8001a78:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001a8e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	6293      	str	r3, [r2, #40]	; 0x28
 8001a98:	e061      	b.n	8001b5e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d031      	beq.n	8001b12 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d12a      	bne.n	8001b12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d122      	bne.n	8001b12 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d11a      	bne.n	8001b12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0a5b      	lsrs	r3, r3, #9
 8001ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d111      	bne.n	8001b12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d108      	bne.n	8001b12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	0e1b      	lsrs	r3, r3, #24
 8001b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e024      	b.n	8001b60 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d01a      	beq.n	8001b5e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001b2e:	f023 0310 	bic.w	r3, r3, #16
 8001b32:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8b8 	bl	8000ca8 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff f8b4 	bl	8000ca8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d0f9      	beq.n	8001b3c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_RCC_OscConfig+0x86c>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	44020c00 	.word	0x44020c00

08001b6c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e19e      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <HAL_RCC_ClockConfig+0x224>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <HAL_RCC_ClockConfig+0x224>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	497e      	ldr	r1, [pc, #504]	; (8001d90 <HAL_RCC_ClockConfig+0x224>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_RCC_ClockConfig+0x224>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e186      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d012      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	4b74      	ldr	r3, [pc, #464]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d909      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	496d      	ldr	r1, [pc, #436]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d012      	beq.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d909      	bls.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4961      	ldr	r1, [pc, #388]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d908      	bls.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4955      	ldr	r1, [pc, #340]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d908      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	f023 020f 	bic.w	r2, r3, #15
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	494a      	ldr	r1, [pc, #296]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 8093 	beq.w	8001da4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e113      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d115      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e107      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0fb      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0f3      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	492c      	ldr	r1, [pc, #176]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce8:	f7fe ffde 	bl	8000ca8 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7fe ffd6 	bl	8000ca8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0d7      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0318 	and.w	r3, r3, #24
 8001d16:	2b18      	cmp	r3, #24
 8001d18:	d1ee      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x18c>
 8001d1a:	e043      	b.n	8001da4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d112      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d26:	f7fe ffbf 	bl	8000ca8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0c0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f003 0318 	and.w	r3, r3, #24
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x1ba>
 8001d48:	e02c      	b.n	8001da4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d122      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7fe ffa8 	bl	8000ca8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0a9      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x228>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0318 	and.w	r3, r3, #24
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d1ee      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1e8>
 8001d76:	e015      	b.n	8001da4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe ff96 	bl	8000ca8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d906      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e097      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000
 8001d94:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d98:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f003 0318 	and.w	r3, r3, #24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e9      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d208      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f023 020f 	bic.w	r2, r3, #15
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	493e      	ldr	r1, [pc, #248]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_ClockConfig+0x360>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d210      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_ClockConfig+0x360>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 020f 	bic.w	r2, r3, #15
 8001de8:	4938      	ldr	r1, [pc, #224]	; (8001ecc <HAL_RCC_ClockConfig+0x360>)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df0:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x360>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e05d      	b.n	8001ebe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d208      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d012      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d209      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	491a      	ldr	r1, [pc, #104]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d209      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e94:	f000 f822 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_ClockConfig+0x35c>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490b      	ldr	r1, [pc, #44]	; (8001ed0 <HAL_RCC_ClockConfig+0x364>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_RCC_ClockConfig+0x368>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x36c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe feae 	bl	8000c14 <HAL_InitTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	44020c00 	.word	0x44020c00
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	08009668 	.word	0x08009668
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001ee2:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001eee:	4b8a      	ldr	r3, [pc, #552]	; (8002118 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e107      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef4:	4b87      	ldr	r3, [pc, #540]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 0318 	and.w	r3, r3, #24
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f00:	4b84      	ldr	r3, [pc, #528]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f0c:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	4a81      	ldr	r2, [pc, #516]	; (800211c <HAL_RCC_GetSysClockFreq+0x240>)
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e0f1      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001f20:	4b7e      	ldr	r3, [pc, #504]	; (800211c <HAL_RCC_GetSysClockFreq+0x240>)
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	e0ee      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f26:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0318 	and.w	r3, r3, #24
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f32:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCC_GetSysClockFreq+0x244>)
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e0e5      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 0318 	and.w	r3, r3, #24
 8001f40:	2b18      	cmp	r3, #24
 8001f42:	f040 80dd 	bne.w	8002100 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001f50:	4b70      	ldr	r3, [pc, #448]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f80:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80b7 	beq.w	80020fa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0xbe>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d056      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x16a>
 8001f98:	e077      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f9a:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02d      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	4a5a      	ldr	r2, [pc, #360]	; (800211c <HAL_RCC_GetSysClockFreq+0x240>)
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002124 <HAL_RCC_GetSysClockFreq+0x248>
 8001fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002000:	e065      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002128 <HAL_RCC_GetSysClockFreq+0x24c>
 8002010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002024:	ed97 6a02 	vldr	s12, [r7, #8]
 8002028:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002124 <HAL_RCC_GetSysClockFreq+0x248>
 800202c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002038:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002044:	e043      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002050:	eddf 6a36 	vldr	s13, [pc, #216]	; 800212c <HAL_RCC_GetSysClockFreq+0x250>
 8002054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002068:	ed97 6a02 	vldr	s12, [r7, #8]
 800206c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002124 <HAL_RCC_GetSysClockFreq+0x248>
 8002070:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002074:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800207c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002084:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002088:	e021      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002094:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002130 <HAL_RCC_GetSysClockFreq+0x254>
 8002098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002124 <HAL_RCC_GetSysClockFreq+0x248>
 80020b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80020cc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_GetSysClockFreq+0x238>)
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	0a5b      	lsrs	r3, r3, #9
 80020d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d8:	3301      	adds	r3, #1
 80020da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80020ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f2:	ee17 3a90 	vmov	r3, s15
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e004      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e001      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_RCC_GetSysClockFreq+0x240>)
 8002102:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002104:	69fb      	ldr	r3, [r7, #28]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	44020c00 	.word	0x44020c00
 8002118:	003d0900 	.word	0x003d0900
 800211c:	03d09000 	.word	0x03d09000
 8002120:	017d7840 	.word	0x017d7840
 8002124:	46000000 	.word	0x46000000
 8002128:	4c742400 	.word	0x4c742400
 800212c:	4bbebc20 	.word	0x4bbebc20
 8002130:	4a742400 	.word	0x4a742400

08002134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002138:	f7ff fed0 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002142:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002146:	4907      	ldr	r1, [pc, #28]	; (8002164 <HAL_RCC_GetHCLKFreq+0x30>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800214a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_RCC_GetHCLKFreq+0x34>)
 8002154:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_RCC_GetHCLKFreq+0x34>)
 8002158:	681b      	ldr	r3, [r3, #0]
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	44020c00 	.word	0x44020c00
 8002164:	08009668 	.word	0x08009668
 8002168:	20000000 	.word	0x20000000

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002170:	f7ff ffe0 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	44020c00 	.word	0x44020c00
 8002194:	08009678 	.word	0x08009678

08002198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800219c:	f7ff ffca 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	44020c00 	.word	0x44020c00
 80021c0:	08009678 	.word	0x08009678

080021c4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80021c8:	f7ff ffb4 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	0b1b      	lsrs	r3, r3, #12
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4904      	ldr	r1, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK3Freq+0x28>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	44020c00 	.word	0x44020c00
 80021ec:	08009678 	.word	0x08009678

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b0d8      	sub	sp, #352	; 0x160
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002202:	2300      	movs	r3, #0
 8002204:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002214:	2500      	movs	r5, #0
 8002216:	ea54 0305 	orrs.w	r3, r4, r5
 800221a:	d00b      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800221c:	4bcd      	ldr	r3, [pc, #820]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800221e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002222:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002226:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4ac9      	ldr	r2, [pc, #804]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800222e:	430b      	orrs	r3, r1
 8002230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f002 0801 	and.w	r8, r2, #1
 8002240:	f04f 0900 	mov.w	r9, #0
 8002244:	ea58 0309 	orrs.w	r3, r8, r9
 8002248:	d042      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800224a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2b05      	cmp	r3, #5
 8002252:	d823      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002254:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225a:	bf00      	nop
 800225c:	080022a5 	.word	0x080022a5
 8002260:	08002275 	.word	0x08002275
 8002264:	08002289 	.word	0x08002289
 8002268:	080022a5 	.word	0x080022a5
 800226c:	080022a5 	.word	0x080022a5
 8002270:	080022a5 	.word	0x080022a5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002274:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002278:	3308      	adds	r3, #8
 800227a:	4618      	mov	r0, r3
 800227c:	f004 feda 	bl	8007034 <RCCEx_PLL2_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002286:	e00e      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002288:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800228c:	3330      	adds	r3, #48	; 0x30
 800228e:	4618      	mov	r0, r3
 8002290:	f004 ff68 	bl	8007164 <RCCEx_PLL3_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800229a:	e004      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80022a2:	e000      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80022a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80022ae:	4ba9      	ldr	r3, [pc, #676]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022b4:	f023 0107 	bic.w	r1, r3, #7
 80022b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	4aa5      	ldr	r2, [pc, #660]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022c0:	430b      	orrs	r3, r1
 80022c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022c6:	e003      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80022cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f002 0a02 	and.w	sl, r2, #2
 80022dc:	f04f 0b00 	mov.w	fp, #0
 80022e0:	ea5a 030b 	orrs.w	r3, sl, fp
 80022e4:	f000 8088 	beq.w	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80022e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	2b28      	cmp	r3, #40	; 0x28
 80022f0:	d868      	bhi.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	080023cd 	.word	0x080023cd
 80022fc:	080023c5 	.word	0x080023c5
 8002300:	080023c5 	.word	0x080023c5
 8002304:	080023c5 	.word	0x080023c5
 8002308:	080023c5 	.word	0x080023c5
 800230c:	080023c5 	.word	0x080023c5
 8002310:	080023c5 	.word	0x080023c5
 8002314:	080023c5 	.word	0x080023c5
 8002318:	0800239d 	.word	0x0800239d
 800231c:	080023c5 	.word	0x080023c5
 8002320:	080023c5 	.word	0x080023c5
 8002324:	080023c5 	.word	0x080023c5
 8002328:	080023c5 	.word	0x080023c5
 800232c:	080023c5 	.word	0x080023c5
 8002330:	080023c5 	.word	0x080023c5
 8002334:	080023c5 	.word	0x080023c5
 8002338:	080023b1 	.word	0x080023b1
 800233c:	080023c5 	.word	0x080023c5
 8002340:	080023c5 	.word	0x080023c5
 8002344:	080023c5 	.word	0x080023c5
 8002348:	080023c5 	.word	0x080023c5
 800234c:	080023c5 	.word	0x080023c5
 8002350:	080023c5 	.word	0x080023c5
 8002354:	080023c5 	.word	0x080023c5
 8002358:	080023cd 	.word	0x080023cd
 800235c:	080023c5 	.word	0x080023c5
 8002360:	080023c5 	.word	0x080023c5
 8002364:	080023c5 	.word	0x080023c5
 8002368:	080023c5 	.word	0x080023c5
 800236c:	080023c5 	.word	0x080023c5
 8002370:	080023c5 	.word	0x080023c5
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023cd 	.word	0x080023cd
 800237c:	080023c5 	.word	0x080023c5
 8002380:	080023c5 	.word	0x080023c5
 8002384:	080023c5 	.word	0x080023c5
 8002388:	080023c5 	.word	0x080023c5
 800238c:	080023c5 	.word	0x080023c5
 8002390:	080023c5 	.word	0x080023c5
 8002394:	080023c5 	.word	0x080023c5
 8002398:	080023cd 	.word	0x080023cd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800239c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023a0:	3308      	adds	r3, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 fe46 	bl	8007034 <RCCEx_PLL2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80023ae:	e00e      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80023b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023b4:	3330      	adds	r3, #48	; 0x30
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 fed4 	bl	8007164 <RCCEx_PLL3_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80023c2:	e004      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80023ca:	e000      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80023cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80023d6:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023dc:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80023e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	4a5b      	ldr	r2, [pc, #364]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023e8:	430b      	orrs	r3, r1
 80023ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023ee:	e003      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f002 0304 	and.w	r3, r2, #4
 8002404:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800240e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002412:	460b      	mov	r3, r1
 8002414:	4313      	orrs	r3, r2
 8002416:	d04e      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800241c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800241e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002422:	d02c      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002424:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002428:	d825      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800242a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242e:	d028      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	d81f      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002436:	2bc0      	cmp	r3, #192	; 0xc0
 8002438:	d025      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800243a:	2bc0      	cmp	r3, #192	; 0xc0
 800243c:	d81b      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d00f      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002442:	2b80      	cmp	r3, #128	; 0x80
 8002444:	d817      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01f      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d113      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800244e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002452:	3308      	adds	r3, #8
 8002454:	4618      	mov	r0, r3
 8002456:	f004 fded 	bl	8007034 <RCCEx_PLL2_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002460:	e014      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002462:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002466:	3330      	adds	r3, #48	; 0x30
 8002468:	4618      	mov	r0, r3
 800246a:	f004 fe7b 	bl	8007164 <RCCEx_PLL3_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002474:	e00a      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800247c:	e006      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800247e:	bf00      	nop
 8002480:	e004      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800248a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800248c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10c      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002496:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800249a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800249e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024a6:	430b      	orrs	r3, r1
 80024a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024ac:	e003      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80024b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	f002 0308 	and.w	r3, r2, #8
 80024c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80024cc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80024d0:	460b      	mov	r3, r1
 80024d2:	4313      	orrs	r3, r2
 80024d4:	d056      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80024d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80024e0:	d031      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80024e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80024e6:	d82a      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80024e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ec:	d02d      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80024ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f2:	d824      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80024f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024f8:	d029      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80024fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024fe:	d81e      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002504:	d011      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250a:	d818      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d023      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	d113      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002516:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800251a:	3308      	adds	r3, #8
 800251c:	4618      	mov	r0, r3
 800251e:	f004 fd89 	bl	8007034 <RCCEx_PLL2_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002528:	e017      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800252a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800252e:	3330      	adds	r3, #48	; 0x30
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fe17 	bl	8007164 <RCCEx_PLL3_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800253c:	e00d      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002544:	e009      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002546:	bf00      	nop
 8002548:	e007      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800254a:	bf00      	nop
 800254c:	e005      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800254e:	bf00      	nop
 8002550:	e003      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002552:	bf00      	nop
 8002554:	44020c00 	.word	0x44020c00
        break;
 8002558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800255a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002562:	4bbb      	ldr	r3, [pc, #748]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002568:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800256c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002572:	4ab7      	ldr	r2, [pc, #732]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002574:	430b      	orrs	r3, r1
 8002576:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800257a:	e003      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002580:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f002 0310 	and.w	r3, r2, #16
 8002590:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800259a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800259e:	460b      	mov	r3, r1
 80025a0:	4313      	orrs	r3, r2
 80025a2:	d053      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80025a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80025ae:	d031      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80025b0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80025b4:	d82a      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ba:	d02d      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80025bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c0:	d824      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025c6:	d029      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80025c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025cc:	d81e      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d2:	d011      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d8:	d818      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d113      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80025e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025e8:	3308      	adds	r3, #8
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 fd22 	bl	8007034 <RCCEx_PLL2_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80025f6:	e014      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80025f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025fc:	3330      	adds	r3, #48	; 0x30
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fdb0 	bl	8007164 <RCCEx_PLL3_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800260a:	e00a      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002612:	e006      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002614:	bf00      	nop
 8002616:	e004      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002618:	bf00      	nop
 800261a:	e002      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800262a:	4b89      	ldr	r3, [pc, #548]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800262c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002630:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263a:	4a85      	ldr	r2, [pc, #532]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800263c:	430b      	orrs	r3, r1
 800263e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002642:	e003      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002648:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800264c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f002 0320 	and.w	r3, r2, #32
 8002658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002662:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002666:	460b      	mov	r3, r1
 8002668:	4313      	orrs	r3, r2
 800266a:	d053      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800266c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002676:	d031      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002678:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800267c:	d82a      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800267e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002682:	d02d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002688:	d824      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800268a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800268e:	d029      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002690:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002694:	d81e      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269a:	d011      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d818      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d020      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d113      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026b0:	3308      	adds	r3, #8
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fcbe 	bl	8007034 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80026be:	e014      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80026c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026c4:	3330      	adds	r3, #48	; 0x30
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fd4c 	bl	8007164 <RCCEx_PLL3_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80026d2:	e00a      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80026da:	e006      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026dc:	bf00      	nop
 80026de:	e004      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026e0:	bf00      	nop
 80026e2:	e002      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026e4:	bf00      	nop
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80026f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026f8:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80026fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a53      	ldr	r2, [pc, #332]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002704:	430b      	orrs	r3, r1
 8002706:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800270a:	e003      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002710:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002714:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002720:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800272a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800272e:	460b      	mov	r3, r1
 8002730:	4313      	orrs	r3, r2
 8002732:	d053      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800273e:	d031      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002740:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002744:	d82a      	bhi.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274a:	d02d      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800274c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002750:	d824      	bhi.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002752:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002756:	d029      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002758:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800275c:	d81e      	bhi.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800275e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002762:	d011      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002768:	d818      	bhi.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800276a:	2b00      	cmp	r3, #0
 800276c:	d020      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800276e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002772:	d113      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002774:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002778:	3308      	adds	r3, #8
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fc5a 	bl	8007034 <RCCEx_PLL2_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002786:	e014      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002788:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800278c:	3330      	adds	r3, #48	; 0x30
 800278e:	4618      	mov	r0, r3
 8002790:	f004 fce8 	bl	8007164 <RCCEx_PLL3_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800279a:	e00a      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80027a2:	e006      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027a4:	bf00      	nop
 80027a6:	e004      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027a8:	bf00      	nop
 80027aa:	e002      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80027bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027c0:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80027c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80027cc:	430b      	orrs	r3, r1
 80027ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027d2:	e003      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80027e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027f2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80027f6:	460b      	mov	r3, r1
 80027f8:	4313      	orrs	r3, r2
 80027fa:	d055      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80027fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002802:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002806:	d033      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002808:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800280c:	d82c      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800280e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002812:	d02f      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002814:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002818:	d826      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800281a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800281e:	d02b      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002820:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002824:	d820      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282a:	d013      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d81a      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d022      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800283a:	d115      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800283c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002840:	3308      	adds	r3, #8
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fbf6 	bl	8007034 <RCCEx_PLL2_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800284e:	e016      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002850:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002854:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002858:	3330      	adds	r3, #48	; 0x30
 800285a:	4618      	mov	r0, r3
 800285c:	f004 fc82 	bl	8007164 <RCCEx_PLL3_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002866:	e00a      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800286e:	e006      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002870:	bf00      	nop
 8002872:	e004      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002874:	bf00      	nop
 8002876:	e002      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800287c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002886:	4bbb      	ldr	r3, [pc, #748]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002888:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800288c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002890:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	4ab7      	ldr	r2, [pc, #732]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002898:	430b      	orrs	r3, r1
 800289a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800289e:	e003      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80028a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80028b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80028be:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80028c2:	460b      	mov	r3, r1
 80028c4:	4313      	orrs	r3, r2
 80028c6:	d053      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80028c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80028d2:	d031      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80028d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80028d8:	d82a      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80028da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028de:	d02d      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80028e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e4:	d824      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80028e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ea:	d029      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80028ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028f0:	d81e      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80028f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f6:	d011      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80028f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028fc:	d818      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002902:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002906:	d113      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800290c:	3308      	adds	r3, #8
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fb90 	bl	8007034 <RCCEx_PLL2_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800291a:	e014      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800291c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002920:	3330      	adds	r3, #48	; 0x30
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fc1e 	bl	8007164 <RCCEx_PLL3_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800292e:	e00a      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002936:	e006      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002938:	bf00      	nop
 800293a:	e004      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800293c:	bf00      	nop
 800293e:	e002      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002946:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800294e:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002954:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800295c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295e:	4a85      	ldr	r2, [pc, #532]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002960:	430b      	orrs	r3, r1
 8002962:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002966:	e003      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002968:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800296c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800297c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002986:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800298a:	460b      	mov	r3, r1
 800298c:	4313      	orrs	r3, r2
 800298e:	d055      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002990:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002998:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800299c:	d031      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800299e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80029a2:	d82a      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a8:	d02d      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80029aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ae:	d824      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80029b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80029b4:	d029      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80029b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80029ba:	d81e      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80029bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c0:	d011      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80029c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c6:	d818      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80029cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d0:	d113      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029d6:	3308      	adds	r3, #8
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 fb2b 	bl	8007034 <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80029e4:	e014      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029ea:	3330      	adds	r3, #48	; 0x30
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 fbb9 	bl	8007164 <RCCEx_PLL3_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80029f8:	e00a      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002a02:	bf00      	nop
 8002a04:	e004      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002a06:	bf00      	nop
 8002a08:	e002      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002a18:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a1e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8002a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a2a:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a32:	e003      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002a48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a52:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002a56:	460b      	mov	r3, r1
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	d044      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d823      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002a68:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002ab9 	.word	0x08002ab9
 8002a74:	08002a89 	.word	0x08002a89
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002ab9 	.word	0x08002ab9
 8002a84:	08002ab9 	.word	0x08002ab9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fad0 	bl	8007034 <RCCEx_PLL2_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002a9a:	e00e      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aa0:	3330      	adds	r3, #48	; 0x30
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fb5e 	bl	8007164 <RCCEx_PLL3_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002aae:	e004      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ab6:	e000      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8002ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ac4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ac8:	f023 0107 	bic.w	r1, r3, #7
 8002acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002adc:	e003      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ade:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ae2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8002ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002af2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002afc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002b00:	460b      	mov	r3, r1
 8002b02:	4313      	orrs	r3, r2
 8002b04:	d04f      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8002b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	2b50      	cmp	r3, #80	; 0x50
 8002b10:	d029      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002b12:	2b50      	cmp	r3, #80	; 0x50
 8002b14:	d823      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d027      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d81f      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002b1e:	2b30      	cmp	r3, #48	; 0x30
 8002b20:	d025      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002b22:	2b30      	cmp	r3, #48	; 0x30
 8002b24:	d81b      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d00f      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d817      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d022      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d113      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 fa79 	bl	8007034 <RCCEx_PLL2_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002b48:	e017      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b4e:	3330      	adds	r3, #48	; 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fb07 	bl	8007164 <RCCEx_PLL3_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002b5c:	e00d      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b64:	e009      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002b66:	bf00      	nop
 8002b68:	e007      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e005      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002b6e:	bf00      	nop
 8002b70:	e003      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002b72:	bf00      	nop
 8002b74:	44020c00 	.word	0x44020c00
        break;
 8002b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002b82:	4baf      	ldr	r3, [pc, #700]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002b84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b88:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	4aaa      	ldr	r2, [pc, #680]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002b96:	430b      	orrs	r3, r1
 8002b98:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ba2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002bb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	d055      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002bd2:	d031      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002bd4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002bd8:	d82a      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bde:	d02d      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002be4:	d824      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bea:	d029      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002bec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bf0:	d81e      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bf6:	d011      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bfc:	d818      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d020      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c06:	d113      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fa10 	bl	8007034 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002c1a:	e014      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c20:	3330      	adds	r3, #48	; 0x30
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fa9e 	bl	8007164 <RCCEx_PLL3_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c36:	e006      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002c38:	bf00      	nop
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002c4e:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c60:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002c62:	430b      	orrs	r3, r1
 8002c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c68:	e003      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c6e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	d03d      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c9e:	d01b      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8002ca0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ca4:	d814      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002ca6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002caa:	d017      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb0:	d80e      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d014      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d109      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cc0:	3330      	adds	r3, #48	; 0x30
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 fa4e 	bl	8007164 <RCCEx_PLL3_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002cce:	e008      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002cd8:	bf00      	nop
 8002cda:	e002      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10d      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002cea:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002cec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cf0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a50      	ldr	r2, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d0a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	d03d      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d3a:	d01b      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8002d3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d40:	d814      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002d42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d46:	d017      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8002d48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d4c:	d80e      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d014      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8002d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d56:	d109      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d5c:	3330      	adds	r3, #48	; 0x30
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fa00 	bl	8007164 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002d6a:	e008      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d72:	e004      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002d74:	bf00      	nop
 8002d76:	e002      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d8c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002da6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002dc0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dd6:	d01b      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8002dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ddc:	d814      	bhi.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de2:	d017      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de8:	d80e      	bhi.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df2:	d109      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002df8:	3330      	adds	r3, #48	; 0x30
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f004 f9b2 	bl	8007164 <RCCEx_PLL3_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e0e:	e004      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d110      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002e24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e28:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e34:	4a02      	ldr	r2, [pc, #8]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002e36:	430b      	orrs	r3, r1
 8002e38:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002e3c:	e006      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8002e3e:	bf00      	nop
 8002e40:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	2100      	movs	r1, #0
 8002e56:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d03d      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8002e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e78:	d01b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8002e7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e7e:	d814      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e84:	d017      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e8a:	d80e      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d109      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e9a:	3330      	adds	r3, #48	; 0x30
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 f961 	bl	8007164 <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8002ea8:	e008      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002ec4:	4bbe      	ldr	r3, [pc, #760]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002eca:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ed6:	4aba      	ldr	r2, [pc, #744]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002ede:	e003      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ee4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002efe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f02:	460b      	mov	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	d035      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f14:	d015      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8002f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f1a:	d80e      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8002f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f24:	d109      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f2a:	3330      	adds	r3, #48	; 0x30
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 f919 	bl	8007164 <RCCEx_PLL3_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f40:	e002      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002f50:	4b9b      	ldr	r3, [pc, #620]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002f52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f56:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002f5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f62:	4a97      	ldr	r2, [pc, #604]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f6a:	e003      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4313      	orrs	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002f94:	4b8a      	ldr	r3, [pc, #552]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4a89      	ldr	r2, [pc, #548]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f9e:	61d3      	str	r3, [r2, #28]
 8002fa0:	4b87      	ldr	r3, [pc, #540]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002fa2:	69d9      	ldr	r1, [r3, #28]
 8002fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fa8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002fac:	4a84      	ldr	r2, [pc, #528]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002fc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	d055      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002fde:	d031      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8002fe0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002fe4:	d82a      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d02d      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d824      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff6:	d029      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ffc:	d81e      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003002:	d011      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003008:	d818      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800300e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003012:	d113      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003018:	3308      	adds	r3, #8
 800301a:	4618      	mov	r0, r3
 800301c:	f004 f80a 	bl	8007034 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003026:	e014      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800302c:	3330      	adds	r3, #48	; 0x30
 800302e:	4618      	mov	r0, r3
 8003030:	f004 f898 	bl	8007164 <RCCEx_PLL3_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800303a:	e00a      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003042:	e006      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003044:	bf00      	nop
 8003046:	e004      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800305a:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800305c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003060:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800306c:	4a54      	ldr	r2, [pc, #336]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800306e:	430b      	orrs	r3, r1
 8003070:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800307a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800307e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003094:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003098:	460b      	mov	r3, r1
 800309a:	4313      	orrs	r3, r2
 800309c:	d055      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800309e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80030aa:	d031      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80030ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80030b0:	d82a      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80030b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b6:	d02d      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80030b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030bc:	d824      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80030be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030c2:	d029      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80030c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030c8:	d81e      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d011      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d4:	d818      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d020      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	d113      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030e4:	3308      	adds	r3, #8
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 ffa4 	bl	8007034 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80030f2:	e014      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030f8:	3330      	adds	r3, #48	; 0x30
 80030fa:	4618      	mov	r0, r3
 80030fc:	f004 f832 	bl	8007164 <RCCEx_PLL3_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003106:	e00a      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800310e:	e006      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003110:	bf00      	nop
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003114:	bf00      	nop
 8003116:	e002      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003128:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800312c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003138:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800313a:	430b      	orrs	r3, r1
 800313c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003140:	e003      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003142:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003146:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800314a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	2100      	movs	r1, #0
 8003154:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	4313      	orrs	r3, r2
 8003168:	d057      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800316a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800316e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003176:	d033      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d82c      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800317e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003182:	d02f      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003188:	d826      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800318a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800318e:	d02b      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003194:	d820      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319a:	d013      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800319c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a0:	d81a      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d022      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d115      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b0:	3308      	adds	r3, #8
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 ff3e 	bl	8007034 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80031be:	e016      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80031c0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031c8:	3330      	adds	r3, #48	; 0x30
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 ffca 	bl	8007164 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80031d6:	e00a      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031de:	e006      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80031e0:	bf00      	nop
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80031e4:	bf00      	nop
 80031e6:	e002      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80031ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80031f6:	4bbb      	ldr	r3, [pc, #748]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80031f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80031fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003204:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003208:	4ab6      	ldr	r2, [pc, #728]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800320a:	430b      	orrs	r3, r1
 800320c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003216:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800321a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	2100      	movs	r1, #0
 8003224:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003230:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003234:	460b      	mov	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	d055      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800323a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800323e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003242:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003246:	d031      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003248:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800324c:	d82a      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800324e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003252:	d02d      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003258:	d824      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800325a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800325e:	d029      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003264:	d81e      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800326a:	d011      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800326c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003270:	d818      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d113      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800327c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003280:	3308      	adds	r3, #8
 8003282:	4618      	mov	r0, r3
 8003284:	f003 fed6 	bl	8007034 <RCCEx_PLL2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800328e:	e014      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003294:	3330      	adds	r3, #48	; 0x30
 8003296:	4618      	mov	r0, r3
 8003298:	f003 ff64 	bl	8007164 <RCCEx_PLL3_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80032a2:	e00a      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032aa:	e006      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80032ac:	bf00      	nop
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80032b0:	bf00      	nop
 80032b2:	e002      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80032b4:	bf00      	nop
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80032c2:	4b88      	ldr	r3, [pc, #544]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80032c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032c8:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80032cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032d4:	4a83      	ldr	r2, [pc, #524]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80032d6:	430b      	orrs	r3, r1
 80032d8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80032dc:	e003      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80032e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	2100      	movs	r1, #0
 80032f0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003300:	460b      	mov	r3, r1
 8003302:	4313      	orrs	r3, r2
 8003304:	d055      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800330a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800330e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003312:	d031      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003314:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003318:	d82a      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800331a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800331e:	d02d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003324:	d824      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003326:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800332a:	d029      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800332c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003330:	d81e      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003336:	d011      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003338:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800333c:	d818      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003346:	d113      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800334c:	3308      	adds	r3, #8
 800334e:	4618      	mov	r0, r3
 8003350:	f003 fe70 	bl	8007034 <RCCEx_PLL2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800335a:	e014      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800335c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003360:	3330      	adds	r3, #48	; 0x30
 8003362:	4618      	mov	r0, r3
 8003364:	f003 fefe 	bl	8007164 <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800336e:	e00a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003376:	e006      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003378:	bf00      	nop
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10d      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800338e:	4b55      	ldr	r3, [pc, #340]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003390:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003394:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80033b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	2100      	movs	r1, #0
 80033bc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80033cc:	460b      	mov	r3, r1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	d055      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80033d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033de:	d031      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80033e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e4:	d82a      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d02d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d824      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80033f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033f6:	d029      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80033f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033fc:	d81e      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80033fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003402:	d011      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003408:	d818      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d020      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800340e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003412:	d113      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003418:	3308      	adds	r3, #8
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fe0a 	bl	8007034 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003426:	e014      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800342c:	3330      	adds	r3, #48	; 0x30
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fe98 	bl	8007164 <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800343a:	e00a      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003444:	bf00      	nop
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003448:	bf00      	nop
 800344a:	e002      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003452:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800345c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003460:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003468:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800346e:	430b      	orrs	r3, r1
 8003470:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003476:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800347a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800347e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800348a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003494:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003498:	460b      	mov	r3, r1
 800349a:	4313      	orrs	r3, r2
 800349c:	d055      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800349e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034aa:	d035      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80034ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034b0:	d82e      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80034b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b6:	d031      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80034b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034bc:	d828      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80034be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c2:	d01b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80034c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c8:	d822      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d009      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80034d4:	e01c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d6:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	4a02      	ldr	r2, [pc, #8]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80034e2:	e01c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80034e4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034ec:	3308      	adds	r3, #8
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fda0 	bl	8007034 <RCCEx_PLL2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80034fa:	e010      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003500:	3330      	adds	r3, #48	; 0x30
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fe2e 	bl	8007164 <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800350e:	e006      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003516:	e002      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800351c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003526:	4bc3      	ldr	r3, [pc, #780]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800352c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003534:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003538:	4abe      	ldr	r2, [pc, #760]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800353a:	430b      	orrs	r3, r1
 800353c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003546:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800354a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003560:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d051      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800356a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800356e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003576:	d033      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800357c:	d82c      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800357e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003582:	d02d      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003584:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003588:	d826      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d019      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d820      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800359a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800359e:	d007      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80035a0:	e01a      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a2:	4ba4      	ldr	r3, [pc, #656]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	4aa3      	ldr	r2, [pc, #652]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80035ae:	e018      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035b4:	3308      	adds	r3, #8
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 fd3c 	bl	8007034 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80035c2:	e00e      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035c8:	3330      	adds	r3, #48	; 0x30
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fdca 	bl	8007164 <RCCEx_PLL3_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80035d6:	e004      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80035e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80035ea:	4b92      	ldr	r3, [pc, #584]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035f0:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80035f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80035fc:	4a8d      	ldr	r2, [pc, #564]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035fe:	430b      	orrs	r3, r1
 8003600:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003604:	e003      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003606:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800360a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800360e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800361a:	67bb      	str	r3, [r7, #120]	; 0x78
 800361c:	2300      	movs	r3, #0
 800361e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003620:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003624:	460b      	mov	r3, r1
 8003626:	4313      	orrs	r3, r2
 8003628:	d032      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800362a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003632:	2b05      	cmp	r3, #5
 8003634:	d80f      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003636:	2b03      	cmp	r3, #3
 8003638:	d211      	bcs.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800363a:	2b01      	cmp	r3, #1
 800363c:	d911      	bls.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800363e:	2b02      	cmp	r3, #2
 8003640:	d109      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003642:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003646:	3308      	adds	r3, #8
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fcf3 	bl	8007034 <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003664:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800366c:	4b71      	ldr	r3, [pc, #452]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800366e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003672:	f023 0107 	bic.w	r1, r3, #7
 8003676:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800367a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800367e:	4a6d      	ldr	r2, [pc, #436]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003680:	430b      	orrs	r3, r1
 8003682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003686:	e003      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800368c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003690:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	2100      	movs	r1, #0
 800369a:	6739      	str	r1, [r7, #112]	; 0x70
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	677b      	str	r3, [r7, #116]	; 0x74
 80036a2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d024      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80036ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d005      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80036c2:	e002      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80036c4:	bf00      	nop
 80036c6:	e000      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80036c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10d      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80036d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036d8:	f023 0108 	bic.w	r1, r3, #8
 80036dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036e4:	4a53      	ldr	r2, [pc, #332]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003702:	66bb      	str	r3, [r7, #104]	; 0x68
 8003704:	2300      	movs	r3, #0
 8003706:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003708:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	f000 80b9 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003714:	4b48      	ldr	r3, [pc, #288]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	4a47      	ldr	r2, [pc, #284]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003720:	f7fd fac2 	bl	8000ca8 <HAL_GetTick>
 8003724:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003728:	e00b      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fd fabd 	bl	8000ca8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d903      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ed      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800374e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8093 	bne.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800375a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003766:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d023      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800376e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003772:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003776:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800377a:	4293      	cmp	r3, r2
 800377c:	d01b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800378e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003792:	4a28      	ldr	r2, [pc, #160]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800379e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a2:	4a24      	ldr	r2, [pc, #144]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80037ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80037b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d019      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fd fa71 	bl	8000ca8 <HAL_GetTick>
 80037c6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ca:	e00d      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd fa6c 	bl	8000ca8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80037dc:	429a      	cmp	r2, r3
 80037de:	d903      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80037ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ea      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80037f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d13a      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80037fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003802:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380e:	d115      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800381c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003826:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800382a:	4a02      	ldr	r2, [pc, #8]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800382c:	430b      	orrs	r3, r1
 800382e:	61d3      	str	r3, [r2, #28]
 8003830:	e00a      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003832:	bf00      	nop
 8003834:	44020c00 	.word	0x44020c00
 8003838:	44020800 	.word	0x44020800
 800383c:	4b9f      	ldr	r3, [pc, #636]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a9e      	ldr	r2, [pc, #632]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003842:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b9c      	ldr	r3, [pc, #624]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800384a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800384e:	4a9b      	ldr	r2, [pc, #620]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003854:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003858:	4b98      	ldr	r3, [pc, #608]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800385a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800385e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003862:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	4a94      	ldr	r2, [pc, #592]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800386c:	430b      	orrs	r3, r1
 800386e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003872:	e008      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003874:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003878:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003882:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003886:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003892:	663b      	str	r3, [r7, #96]	; 0x60
 8003894:	2300      	movs	r3, #0
 8003896:	667b      	str	r3, [r7, #100]	; 0x64
 8003898:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d035      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80038a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80038aa:	2b30      	cmp	r3, #48	; 0x30
 80038ac:	d014      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d80e      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d012      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d80a      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d106      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c2:	4b7e      	ldr	r3, [pc, #504]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	4a7d      	ldr	r2, [pc, #500]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038d6:	e004      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80038d8:	bf00      	nop
 80038da:	e002      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80038e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80038ea:	4b74      	ldr	r3, [pc, #464]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80038ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80038fc:	4a6f      	ldr	r2, [pc, #444]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800390a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800390e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800391a:	65bb      	str	r3, [r7, #88]	; 0x58
 800391c:	2300      	movs	r3, #0
 800391e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003920:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d033      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800392a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800392e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d007      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800393a:	e010      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393c:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003946:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003948:	e00d      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800394a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800394e:	3308      	adds	r3, #8
 8003950:	4618      	mov	r0, r3
 8003952:	f003 fb6f 	bl	8007034 <RCCEx_PLL2_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800395c:	e003      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003966:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800396e:	4b53      	ldr	r3, [pc, #332]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003974:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800397c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003980:	4a4e      	ldr	r2, [pc, #312]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003982:	430b      	orrs	r3, r1
 8003984:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800398e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003992:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800399e:	653b      	str	r3, [r7, #80]	; 0x50
 80039a0:	2300      	movs	r3, #0
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
 80039a4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d033      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80039ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d007      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80039be:	e010      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	4a3d      	ldr	r2, [pc, #244]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80039cc:	e00d      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039d2:	3308      	adds	r3, #8
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fb2d 	bl	8007034 <RCCEx_PLL2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80039f2:	4b32      	ldr	r3, [pc, #200]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80039f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80039fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003a04:	4a2d      	ldr	r2, [pc, #180]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003a06:	430b      	orrs	r3, r1
 8003a08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	2300      	movs	r3, #0
 8003a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d04a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d827      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a59 	.word	0x08003a59
 8003a48:	08003a67 	.word	0x08003a67
 8003a4c:	08003a7b 	.word	0x08003a7b
 8003a50:	08003a97 	.word	0x08003a97
 8003a54:	08003a97 	.word	0x08003a97
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	4a17      	ldr	r2, [pc, #92]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a64:	e018      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fae1 	bl	8007034 <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a78:	e00e      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a7e:	3330      	adds	r3, #48	; 0x30
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fb6f 	bl	8007164 <RCCEx_PLL3_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e004      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10f      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa6:	f023 0107 	bic.w	r1, r3, #7
 8003aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab2:	4a02      	ldr	r2, [pc, #8]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aba:	e005      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003abc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ac4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8003ada:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f000 8081 	beq.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d85f      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b7d 	.word	0x08003b7d
 8003afc:	08003bb3 	.word	0x08003bb3
 8003b00:	08003bb3 	.word	0x08003bb3
 8003b04:	08003bb3 	.word	0x08003bb3
 8003b08:	08003bb3 	.word	0x08003bb3
 8003b0c:	08003bb3 	.word	0x08003bb3
 8003b10:	08003bb3 	.word	0x08003bb3
 8003b14:	08003bb3 	.word	0x08003bb3
 8003b18:	08003b8b 	.word	0x08003b8b
 8003b1c:	08003bb3 	.word	0x08003bb3
 8003b20:	08003bb3 	.word	0x08003bb3
 8003b24:	08003bb3 	.word	0x08003bb3
 8003b28:	08003bb3 	.word	0x08003bb3
 8003b2c:	08003bb3 	.word	0x08003bb3
 8003b30:	08003bb3 	.word	0x08003bb3
 8003b34:	08003bb3 	.word	0x08003bb3
 8003b38:	08003b9f 	.word	0x08003b9f
 8003b3c:	08003bb3 	.word	0x08003bb3
 8003b40:	08003bb3 	.word	0x08003bb3
 8003b44:	08003bb3 	.word	0x08003bb3
 8003b48:	08003bb3 	.word	0x08003bb3
 8003b4c:	08003bb3 	.word	0x08003bb3
 8003b50:	08003bb3 	.word	0x08003bb3
 8003b54:	08003bb3 	.word	0x08003bb3
 8003b58:	08003bbb 	.word	0x08003bbb
 8003b5c:	08003bb3 	.word	0x08003bb3
 8003b60:	08003bb3 	.word	0x08003bb3
 8003b64:	08003bb3 	.word	0x08003bb3
 8003b68:	08003bb3 	.word	0x08003bb3
 8003b6c:	08003bb3 	.word	0x08003bb3
 8003b70:	08003bb3 	.word	0x08003bb3
 8003b74:	08003bb3 	.word	0x08003bb3
 8003b78:	08003bbb 	.word	0x08003bbb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7c:	4bab      	ldr	r3, [pc, #684]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	4aaa      	ldr	r2, [pc, #680]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b86:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003b88:	e018      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b8e:	3308      	adds	r3, #8
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fa4f 	bl	8007034 <RCCEx_PLL2_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e00e      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ba2:	3330      	adds	r3, #48	; 0x30
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 fadd 	bl	8007164 <RCCEx_PLL3_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003bb0:	e004      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003bc4:	4b99      	ldr	r3, [pc, #612]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bd6:	4a95      	ldr	r2, [pc, #596]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bde:	e003      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003be4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4313      	orrs	r3, r2
 8003c02:	d04e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c10:	d02e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c16:	d827      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003c18:	2bc0      	cmp	r3, #192	; 0xc0
 8003c1a:	d02b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8003c1c:	2bc0      	cmp	r3, #192	; 0xc0
 8003c1e:	d823      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d017      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d81f      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d007      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8003c30:	e01a      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c32:	4b7e      	ldr	r3, [pc, #504]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	4a7d      	ldr	r2, [pc, #500]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c3e:	e01a      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c44:	3308      	adds	r3, #8
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 f9f4 	bl	8007034 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c52:	e010      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c58:	3330      	adds	r3, #48	; 0x30
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f003 fa82 	bl	8007164 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c66:	e006      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c6e:	e002      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003c7e:	4b6b      	ldr	r3, [pc, #428]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c84:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c90:	4a66      	ldr	r2, [pc, #408]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c9e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d055      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003cc6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003cca:	d031      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8003ccc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003cd0:	d82a      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d02d      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8003cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cdc:	d824      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003cde:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ce2:	d029      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8003ce4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ce8:	d81e      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cee:	d011      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d818      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfe:	d113      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d04:	3308      	adds	r3, #8
 8003d06:	4618      	mov	r0, r3
 8003d08:	f003 f994 	bl	8007034 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003d12:	e014      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d18:	3330      	adds	r3, #48	; 0x30
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fa22 	bl	8007164 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003d26:	e00a      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d2e:	e006      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003d30:	bf00      	nop
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003d34:	bf00      	nop
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d4c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d58:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d66:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8003d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d058      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8003d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d8e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d92:	d031      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8003d94:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d98:	d82a      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9e:	d02d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8003da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da4:	d824      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003daa:	d029      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8003dac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003db0:	d81e      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d011      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbc:	d818      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d020      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d113      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dcc:	3308      	adds	r3, #8
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 f930 	bl	8007034 <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003dda:	e014      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de0:	3330      	adds	r3, #48	; 0x30
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 f9be 	bl	8007164 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003dee:	e00a      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003df6:	e006      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003df8:	bf00      	nop
 8003dfa:	e004      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e002      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d110      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e14:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e20:	4902      	ldr	r1, [pc, #8]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8003e2a:	bf00      	nop
 8003e2c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	2100      	movs	r1, #0
 8003e42:	6239      	str	r1, [r7, #32]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d055      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8003e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e5c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003e60:	d031      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8003e62:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003e66:	d82a      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6c:	d02d      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8003e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e72:	d824      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003e74:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003e78:	d029      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8003e7a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003e7e:	d81e      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d011      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8a:	d818      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d113      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 f8c9 	bl	8007034 <RCCEx_PLL2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ea8:	e014      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eae:	3330      	adds	r3, #48	; 0x30
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 f957 	bl	8007164 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8003edc:	4b88      	ldr	r3, [pc, #544]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee2:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8003ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eee:	4984      	ldr	r1, [pc, #528]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003efc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	61b9      	str	r1, [r7, #24]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f16:	460b      	mov	r3, r1
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	d03d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d81c      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f6b 	.word	0x08003f6b
 8003f34:	08003f41 	.word	0x08003f41
 8003f38:	08003f4f 	.word	0x08003f4f
 8003f3c:	08003f6b 	.word	0x08003f6b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f40:	4b6f      	ldr	r3, [pc, #444]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	4a6e      	ldr	r2, [pc, #440]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f4c:	e00e      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f52:	3308      	adds	r3, #8
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 f86d 	bl	8007034 <RCCEx_PLL2_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003f60:	e004      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f68:	e000      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8003f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003f74:	4b62      	ldr	r3, [pc, #392]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f86:	495e      	ldr	r1, [pc, #376]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003f8e:	e003      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f94:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	6139      	str	r1, [r7, #16]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	d03a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8003fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc6:	d815      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd0:	d110      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd2:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fdc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003fde:	e00e      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f003 f824 	bl	8007034 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ff2:	e004      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800400c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004014:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004018:	4939      	ldr	r1, [pc, #228]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004026:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	2100      	movs	r1, #0
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d038      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800404a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800404e:	2b30      	cmp	r3, #48	; 0x30
 8004050:	d01b      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004052:	2b30      	cmp	r3, #48	; 0x30
 8004054:	d815      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004056:	2b10      	cmp	r3, #16
 8004058:	d002      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800405a:	2b20      	cmp	r3, #32
 800405c:	d007      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800405e:	e010      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800406c:	e00e      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800406e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004072:	3330      	adds	r3, #48	; 0x30
 8004074:	4618      	mov	r0, r3
 8004076:	f003 f875 	bl	8007164 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004080:	e004      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800408a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004096:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800409a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800409e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040a6:	4916      	ldr	r1, [pc, #88]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	2100      	movs	r1, #0
 80040c2:	6039      	str	r1, [r7, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d00c      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80040d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80040e6:	4906      	ldr	r1, [pc, #24]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80040ee:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	44020c00 	.word	0x44020c00

08004104 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004104:	b480      	push	{r7}
 8004106:	b08b      	sub	sp, #44	; 0x2c
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800410c:	4bad      	ldr	r3, [pc, #692]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004114:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004116:	4bab      	ldr	r3, [pc, #684]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004120:	4ba8      	ldr	r3, [pc, #672]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800412c:	4ba5      	ldr	r3, [pc, #660]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004136:	4ba3      	ldr	r3, [pc, #652]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	08db      	lsrs	r3, r3, #3
 800413c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8126 	beq.w	80043a6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d053      	beq.n	8004208 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d86f      	bhi.n	8004246 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d02b      	beq.n	80041ca <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004172:	e068      	b.n	8004246 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004174:	4b93      	ldr	r3, [pc, #588]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	08db      	lsrs	r3, r3, #3
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	4a92      	ldr	r2, [pc, #584]	; (80043c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80041ac:	eddf 5a87 	vldr	s11, [pc, #540]	; 80043cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80041b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80041c8:	e068      	b.n	800429c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80041d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80041ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004206:	e049      	b.n	800429c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a70 	vldr	s13, [pc, #448]	; 80043d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004224:	ed97 6a04 	vldr	s12, [r7, #16]
 8004228:	eddf 5a68 	vldr	s11, [pc, #416]	; 80043cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800422c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004240:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004244:	e02a      	b.n	800429c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	4a5d      	ldr	r2, [pc, #372]	; (80043c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427a:	ed97 6a04 	vldr	s12, [r7, #16]
 800427e:	eddf 5a53 	vldr	s11, [pc, #332]	; 80043cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800428e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004296:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800429a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a8:	d121      	bne.n	80042ee <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80042aa:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d017      	beq.n	80042e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80042b6:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	0a5b      	lsrs	r3, r3, #9
 80042bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80042c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80042d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80042d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042dc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004300:	d121      	bne.n	8004346 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004302:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d017      	beq.n	800433e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004324:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004328:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800432c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004334:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	e006      	b.n	800434c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	e002      	b.n	800434c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004358:	d121      	bne.n	800439e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d017      	beq.n	8004396 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004366:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	0e1b      	lsrs	r3, r3, #24
 800436c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800437c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004380:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004394:	e010      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	e00c      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	e008      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
}
 80043b8:	bf00      	nop
 80043ba:	372c      	adds	r7, #44	; 0x2c
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	44020c00 	.word	0x44020c00
 80043c8:	03d09000 	.word	0x03d09000
 80043cc:	46000000 	.word	0x46000000
 80043d0:	4a742400 	.word	0x4a742400
 80043d4:	4bbebc20 	.word	0x4bbebc20

080043d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80043d8:	b480      	push	{r7}
 80043da:	b08b      	sub	sp, #44	; 0x2c
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80043e0:	4bad      	ldr	r3, [pc, #692]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80043ea:	4bab      	ldr	r3, [pc, #684]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80043f4:	4ba8      	ldr	r3, [pc, #672]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043fe:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004400:	4ba5      	ldr	r3, [pc, #660]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800440a:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	08db      	lsrs	r3, r3, #3
 8004410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8126 	beq.w	800467a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d053      	beq.n	80044dc <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d86f      	bhi.n	800451a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d003      	beq.n	8004448 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d02b      	beq.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004446:	e068      	b.n	800451a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004448:	4b93      	ldr	r3, [pc, #588]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	4a92      	ldr	r2, [pc, #584]	; (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004480:	eddf 5a87 	vldr	s11, [pc, #540]	; 80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004498:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800449c:	e068      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	ee07 3a90 	vmov	s15, r3
 80044a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80044ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80044be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80044da:	e049      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a70 	vldr	s13, [pc, #448]	; 80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80044fc:	eddf 5a68 	vldr	s11, [pc, #416]	; 80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004514:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004518:	e02a      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800451a:	4b5f      	ldr	r3, [pc, #380]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	4a5d      	ldr	r2, [pc, #372]	; (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004552:	eddf 5a53 	vldr	s11, [pc, #332]	; 80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800456e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004570:	4b49      	ldr	r3, [pc, #292]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457c:	d121      	bne.n	80045c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800457e:	4b46      	ldr	r3, [pc, #280]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d017      	beq.n	80045ba <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800458a:	4b43      	ldr	r3, [pc, #268]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	0a5b      	lsrs	r3, r3, #9
 8004590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800459c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80045a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80045a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e006      	b.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045c8:	4b33      	ldr	r3, [pc, #204]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d4:	d121      	bne.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80045d6:	4b30      	ldr	r3, [pc, #192]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80045f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80045fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004608:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004620:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800462c:	d121      	bne.n	8004672 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800462e:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	0e1b      	lsrs	r3, r3, #24
 8004640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800464c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004650:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004654:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004660:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004668:	e010      	b.n	800468c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	e00c      	b.n	800468c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	e008      	b.n	800468c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	bf00      	nop
 800468e:	372c      	adds	r7, #44	; 0x2c
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	44020c00 	.word	0x44020c00
 800469c:	03d09000 	.word	0x03d09000
 80046a0:	46000000 	.word	0x46000000
 80046a4:	4a742400 	.word	0x4a742400
 80046a8:	4bbebc20 	.word	0x4bbebc20

080046ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b08b      	sub	sp, #44	; 0x2c
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80046b4:	4bad      	ldr	r3, [pc, #692]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046bc:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80046be:	4bab      	ldr	r3, [pc, #684]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80046c8:	4ba8      	ldr	r3, [pc, #672]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80046d4:	4ba5      	ldr	r3, [pc, #660]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80046de:	4ba3      	ldr	r3, [pc, #652]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8126 	beq.w	800494e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b03      	cmp	r3, #3
 8004706:	d053      	beq.n	80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d86f      	bhi.n	80047ee <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d003      	beq.n	800471c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d02b      	beq.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800471a:	e068      	b.n	80047ee <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800471c:	4b93      	ldr	r3, [pc, #588]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	4a92      	ldr	r2, [pc, #584]	; (8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004750:	ed97 6a04 	vldr	s12, [r7, #16]
 8004754:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004770:	e068      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004792:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80047ae:	e049      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a70 	vldr	s13, [pc, #448]	; 800497c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80047d0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80047d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80047ec:	e02a      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047ee:	4b5f      	ldr	r3, [pc, #380]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	08db      	lsrs	r3, r3, #3
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	4a5d      	ldr	r2, [pc, #372]	; (8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a04 	vldr	s12, [r7, #16]
 8004826:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004842:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004844:	4b49      	ldr	r3, [pc, #292]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800484c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004850:	d121      	bne.n	8004896 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004852:	4b46      	ldr	r3, [pc, #280]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d017      	beq.n	800488e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800485e:	4b43      	ldr	r3, [pc, #268]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	0a5b      	lsrs	r3, r3, #9
 8004864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004874:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004878:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800487c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e006      	b.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e002      	b.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800489c:	4b33      	ldr	r3, [pc, #204]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a8:	d121      	bne.n	80048ee <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80048aa:	4b30      	ldr	r3, [pc, #192]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048b6:	4b2d      	ldr	r3, [pc, #180]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80048c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80048d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80048d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048dc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	e002      	b.n	80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d121      	bne.n	8004946 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d017      	beq.n	800493e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	0e1b      	lsrs	r3, r3, #24
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8004920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004924:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004928:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800492c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004934:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800493c:	e010      	b.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	e00c      	b.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	e008      	b.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
}
 8004960:	bf00      	nop
 8004962:	372c      	adds	r7, #44	; 0x2c
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	44020c00 	.word	0x44020c00
 8004970:	03d09000 	.word	0x03d09000
 8004974:	46000000 	.word	0x46000000
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4bbebc20 	.word	0x4bbebc20

08004980 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b08f      	sub	sp, #60	; 0x3c
 8004984:	af00      	add	r7, sp, #0
 8004986:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800498a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498e:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8004992:	4321      	orrs	r1, r4
 8004994:	d150      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004996:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d108      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b6:	d104      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80049b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
 80049be:	f002 bb2a 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d0:	d108      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d104      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80049da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
 80049e0:	f002 bb19 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f0:	d119      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f8:	d115      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a06:	d30a      	bcc.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004a1a:	f002 bafc 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004a22:	f002 baf8 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2a:	f002 baf4 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004a2e:	bf00      	nop
 8004a30:	44020c00 	.word	0x44020c00
 8004a34:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a3c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8004a40:	ea50 0104 	orrs.w	r1, r0, r4
 8004a44:	f001 8275 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8004a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a4c:	2801      	cmp	r0, #1
 8004a4e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8004a52:	f082 82dd 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a5a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8004a5e:	ea50 0104 	orrs.w	r1, r0, r4
 8004a62:	f001 816c 	beq.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8004a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a6a:	2801      	cmp	r0, #1
 8004a6c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8004a70:	f082 82ce 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a78:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8004a7c:	ea50 0104 	orrs.w	r1, r0, r4
 8004a80:	f001 8602 	beq.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8004a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a88:	2801      	cmp	r0, #1
 8004a8a:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8004a8e:	f082 82bf 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a96:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8004a9a:	ea50 0104 	orrs.w	r1, r0, r4
 8004a9e:	f001 854c 	beq.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8004aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aa6:	2801      	cmp	r0, #1
 8004aa8:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8004aac:	f082 82b0 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ab4:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8004ab8:	ea50 0104 	orrs.w	r1, r0, r4
 8004abc:	f001 849e 	beq.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8004ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ac4:	2801      	cmp	r0, #1
 8004ac6:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8004aca:	f082 82a1 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad2:	f1a1 0420 	sub.w	r4, r1, #32
 8004ad6:	ea50 0104 	orrs.w	r1, r0, r4
 8004ada:	f001 83e8 	beq.w	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8004ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ae2:	2801      	cmp	r0, #1
 8004ae4:	f171 0120 	sbcs.w	r1, r1, #32
 8004ae8:	f082 8292 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004af0:	f1a1 0410 	sub.w	r4, r1, #16
 8004af4:	ea50 0104 	orrs.w	r1, r0, r4
 8004af8:	f002 8256 	beq.w	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8004afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b00:	2801      	cmp	r0, #1
 8004b02:	f171 0110 	sbcs.w	r1, r1, #16
 8004b06:	f082 8283 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b0e:	f1a1 0408 	sub.w	r4, r1, #8
 8004b12:	ea50 0104 	orrs.w	r1, r0, r4
 8004b16:	f002 81cc 	beq.w	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8004b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b1e:	2801      	cmp	r0, #1
 8004b20:	f171 0108 	sbcs.w	r1, r1, #8
 8004b24:	f082 8274 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b2c:	1f0c      	subs	r4, r1, #4
 8004b2e:	ea50 0104 	orrs.w	r1, r0, r4
 8004b32:	f001 8648 	beq.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8004b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b3a:	2801      	cmp	r0, #1
 8004b3c:	f171 0104 	sbcs.w	r1, r1, #4
 8004b40:	f082 8266 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b48:	1e8c      	subs	r4, r1, #2
 8004b4a:	ea50 0104 	orrs.w	r1, r0, r4
 8004b4e:	f002 8143 	beq.w	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8004b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b56:	2801      	cmp	r0, #1
 8004b58:	f171 0102 	sbcs.w	r1, r1, #2
 8004b5c:	f082 8258 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b64:	1e4c      	subs	r4, r1, #1
 8004b66:	ea50 0104 	orrs.w	r1, r0, r4
 8004b6a:	f002 80ce 	beq.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8004b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b72:	2801      	cmp	r0, #1
 8004b74:	f171 0101 	sbcs.w	r1, r1, #1
 8004b78:	f082 824a 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b80:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8004b84:	4321      	orrs	r1, r4
 8004b86:	f002 8059 	beq.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8004b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b8e:	4cd9      	ldr	r4, [pc, #868]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	f171 0100 	sbcs.w	r1, r1, #0
 8004b96:	f082 823b 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8004ba2:	4321      	orrs	r1, r4
 8004ba4:	f001 87d9 	beq.w	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8004ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bac:	4cd2      	ldr	r4, [pc, #840]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004bae:	42a0      	cmp	r0, r4
 8004bb0:	f171 0100 	sbcs.w	r1, r1, #0
 8004bb4:	f082 822c 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bbc:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8004bc0:	4321      	orrs	r1, r4
 8004bc2:	f001 8751 	beq.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8004bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bca:	4ccc      	ldr	r4, [pc, #816]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	f171 0100 	sbcs.w	r1, r1, #0
 8004bd2:	f082 821d 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bda:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8004bde:	4321      	orrs	r1, r4
 8004be0:	f001 869a 	beq.w	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8004be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004be8:	4cc5      	ldr	r4, [pc, #788]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004bea:	42a0      	cmp	r0, r4
 8004bec:	f171 0100 	sbcs.w	r1, r1, #0
 8004bf0:	f082 820e 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf8:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8004bfc:	4321      	orrs	r1, r4
 8004bfe:	f001 8612 	beq.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8004c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c06:	4cbf      	ldr	r4, [pc, #764]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	f171 0100 	sbcs.w	r1, r1, #0
 8004c0e:	f082 81ff 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c16:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8004c1a:	4321      	orrs	r1, r4
 8004c1c:	f002 817e 	beq.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8004c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c24:	4cb8      	ldr	r4, [pc, #736]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c26:	42a0      	cmp	r0, r4
 8004c28:	f171 0100 	sbcs.w	r1, r1, #0
 8004c2c:	f082 81f0 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c34:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8004c38:	4321      	orrs	r1, r4
 8004c3a:	f000 829e 	beq.w	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8004c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c42:	4cb2      	ldr	r4, [pc, #712]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	f171 0100 	sbcs.w	r1, r1, #0
 8004c4a:	f082 81e1 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c52:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8004c56:	4321      	orrs	r1, r4
 8004c58:	f000 826d 	beq.w	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c60:	4cab      	ldr	r4, [pc, #684]	; (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c62:	42a0      	cmp	r0, r4
 8004c64:	f171 0100 	sbcs.w	r1, r1, #0
 8004c68:	f082 81d2 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c70:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8004c74:	4321      	orrs	r1, r4
 8004c76:	f001 800d 	beq.w	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8004c7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c7e:	4ca5      	ldr	r4, [pc, #660]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004c80:	42a0      	cmp	r0, r4
 8004c82:	f171 0100 	sbcs.w	r1, r1, #0
 8004c86:	f082 81c3 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8004c92:	4321      	orrs	r1, r4
 8004c94:	f000 81d0 	beq.w	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8004c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c9c:	4c9e      	ldr	r4, [pc, #632]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004c9e:	42a0      	cmp	r0, r4
 8004ca0:	f171 0100 	sbcs.w	r1, r1, #0
 8004ca4:	f082 81b4 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cac:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8004cb0:	4321      	orrs	r1, r4
 8004cb2:	f000 8142 	beq.w	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8004cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cba:	4c98      	ldr	r4, [pc, #608]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	f171 0100 	sbcs.w	r1, r1, #0
 8004cc2:	f082 81a5 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cca:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8004cce:	4321      	orrs	r1, r4
 8004cd0:	f001 824e 	beq.w	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8004cd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cd8:	4c91      	ldr	r4, [pc, #580]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004cda:	42a0      	cmp	r0, r4
 8004cdc:	f171 0100 	sbcs.w	r1, r1, #0
 8004ce0:	f082 8196 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce8:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8004cec:	4321      	orrs	r1, r4
 8004cee:	f001 8197 	beq.w	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cf6:	4c8b      	ldr	r4, [pc, #556]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004cf8:	42a0      	cmp	r0, r4
 8004cfa:	f171 0100 	sbcs.w	r1, r1, #0
 8004cfe:	f082 8187 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d06:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8004d0a:	4321      	orrs	r1, r4
 8004d0c:	f001 8154 	beq.w	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8004d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d14:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8004d18:	f171 0100 	sbcs.w	r1, r1, #0
 8004d1c:	f082 8178 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d24:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8004d28:	4321      	orrs	r1, r4
 8004d2a:	f001 80b7 	beq.w	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8004d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d32:	f248 0401 	movw	r4, #32769	; 0x8001
 8004d36:	42a0      	cmp	r0, r4
 8004d38:	f171 0100 	sbcs.w	r1, r1, #0
 8004d3c:	f082 8168 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d44:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8004d48:	4321      	orrs	r1, r4
 8004d4a:	f001 8064 	beq.w	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8004d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d52:	f244 0401 	movw	r4, #16385	; 0x4001
 8004d56:	42a0      	cmp	r0, r4
 8004d58:	f171 0100 	sbcs.w	r1, r1, #0
 8004d5c:	f082 8158 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d64:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8004d68:	4321      	orrs	r1, r4
 8004d6a:	f001 8011 	beq.w	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8004d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d72:	f242 0401 	movw	r4, #8193	; 0x2001
 8004d76:	42a0      	cmp	r0, r4
 8004d78:	f171 0100 	sbcs.w	r1, r1, #0
 8004d7c:	f082 8148 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d84:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8004d88:	4321      	orrs	r1, r4
 8004d8a:	f000 871e 	beq.w	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8004d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d92:	f241 0401 	movw	r4, #4097	; 0x1001
 8004d96:	42a0      	cmp	r0, r4
 8004d98:	f171 0100 	sbcs.w	r1, r1, #0
 8004d9c:	f082 8138 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8004da8:	4321      	orrs	r1, r4
 8004daa:	f000 86a8 	beq.w	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8004dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004db2:	f640 0401 	movw	r4, #2049	; 0x801
 8004db6:	42a0      	cmp	r0, r4
 8004db8:	f171 0100 	sbcs.w	r1, r1, #0
 8004dbc:	f082 8128 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc4:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8004dc8:	4321      	orrs	r1, r4
 8004dca:	f000 8632 	beq.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8004dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dd2:	f240 4401 	movw	r4, #1025	; 0x401
 8004dd6:	42a0      	cmp	r0, r4
 8004dd8:	f171 0100 	sbcs.w	r1, r1, #0
 8004ddc:	f082 8118 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de4:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8004de8:	4321      	orrs	r1, r4
 8004dea:	f000 85b0 	beq.w	800594e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8004dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df2:	f240 2401 	movw	r4, #513	; 0x201
 8004df6:	42a0      	cmp	r0, r4
 8004df8:	f171 0100 	sbcs.w	r1, r1, #0
 8004dfc:	f082 8108 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e04:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8004e08:	4321      	orrs	r1, r4
 8004e0a:	f000 8535 	beq.w	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e12:	f240 1401 	movw	r4, #257	; 0x101
 8004e16:	42a0      	cmp	r0, r4
 8004e18:	f171 0100 	sbcs.w	r1, r1, #0
 8004e1c:	f082 80f8 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e24:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8004e28:	4321      	orrs	r1, r4
 8004e2a:	f000 84ba 	beq.w	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8004e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e32:	2881      	cmp	r0, #129	; 0x81
 8004e34:	f171 0100 	sbcs.w	r1, r1, #0
 8004e38:	f082 80ea 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e40:	2821      	cmp	r0, #33	; 0x21
 8004e42:	f171 0100 	sbcs.w	r1, r1, #0
 8004e46:	d26f      	bcs.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e4c:	4301      	orrs	r1, r0
 8004e4e:	f002 80df 	beq.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e56:	1e42      	subs	r2, r0, #1
 8004e58:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8004e5c:	2a20      	cmp	r2, #32
 8004e5e:	f173 0100 	sbcs.w	r1, r3, #0
 8004e62:	f082 80d5 	bcs.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004e66:	2a1f      	cmp	r2, #31
 8004e68:	f202 80d2 	bhi.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004e6c:	a101      	add	r1, pc, #4	; (adr r1, 8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004e6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	080051d5 	.word	0x080051d5
 8004e78:	080052a1 	.word	0x080052a1
 8004e7c:	08007011 	.word	0x08007011
 8004e80:	08005361 	.word	0x08005361
 8004e84:	08007011 	.word	0x08007011
 8004e88:	08007011 	.word	0x08007011
 8004e8c:	08007011 	.word	0x08007011
 8004e90:	08005431 	.word	0x08005431
 8004e94:	08007011 	.word	0x08007011
 8004e98:	08007011 	.word	0x08007011
 8004e9c:	08007011 	.word	0x08007011
 8004ea0:	08007011 	.word	0x08007011
 8004ea4:	08007011 	.word	0x08007011
 8004ea8:	08007011 	.word	0x08007011
 8004eac:	08007011 	.word	0x08007011
 8004eb0:	08005513 	.word	0x08005513
 8004eb4:	08007011 	.word	0x08007011
 8004eb8:	08007011 	.word	0x08007011
 8004ebc:	08007011 	.word	0x08007011
 8004ec0:	08007011 	.word	0x08007011
 8004ec4:	08007011 	.word	0x08007011
 8004ec8:	08007011 	.word	0x08007011
 8004ecc:	08007011 	.word	0x08007011
 8004ed0:	08007011 	.word	0x08007011
 8004ed4:	08007011 	.word	0x08007011
 8004ed8:	08007011 	.word	0x08007011
 8004edc:	08007011 	.word	0x08007011
 8004ee0:	08007011 	.word	0x08007011
 8004ee4:	08007011 	.word	0x08007011
 8004ee8:	08007011 	.word	0x08007011
 8004eec:	08007011 	.word	0x08007011
 8004ef0:	080055e9 	.word	0x080055e9
 8004ef4:	80000001 	.word	0x80000001
 8004ef8:	40000001 	.word	0x40000001
 8004efc:	20000001 	.word	0x20000001
 8004f00:	10000001 	.word	0x10000001
 8004f04:	08000001 	.word	0x08000001
 8004f08:	04000001 	.word	0x04000001
 8004f0c:	00800001 	.word	0x00800001
 8004f10:	00400001 	.word	0x00400001
 8004f14:	00200001 	.word	0x00200001
 8004f18:	00100001 	.word	0x00100001
 8004f1c:	00080001 	.word	0x00080001
 8004f20:	00040001 	.word	0x00040001
 8004f24:	00020001 	.word	0x00020001
 8004f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f2c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004f30:	430b      	orrs	r3, r1
 8004f32:	f000 83c4 	beq.w	80056be <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8004f36:	f002 b86b 	b.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004f3a:	4ba1      	ldr	r3, [pc, #644]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f40:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f4c:	d036      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f54:	d86b      	bhi.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5c:	d02b      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f64:	d863      	bhi.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6c:	d01b      	beq.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f74:	d85b      	bhi.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f82:	d008      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8004f84:	e053      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f86:	f107 0320 	add.w	r3, r7, #32
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f8ba 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004f94:	e04e      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fa1c 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004fa4:	e046      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fa6:	f107 0308 	add.w	r3, r7, #8
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fb7e 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004fb4:	e03e      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004fb6:	4b83      	ldr	r3, [pc, #524]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004fba:	e03b      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fbc:	4b80      	ldr	r3, [pc, #512]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fc2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fc8:	4b7d      	ldr	r3, [pc, #500]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fda:	4b79      	ldr	r3, [pc, #484]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	08db      	lsrs	r3, r3, #3
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	4a78      	ldr	r2, [pc, #480]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	e01e      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fee:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffa:	d106      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d102      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005004:	4b71      	ldr	r3, [pc, #452]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
 8005008:	e010      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800500a:	4b6d      	ldr	r3, [pc, #436]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005016:	d106      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501e:	d102      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005020:	4b6b      	ldr	r3, [pc, #428]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
 8005024:	e002      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800502c:	e002      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005032:	bf00      	nop
          }
        }
        break;
 8005034:	f001 bfef 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005038:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800503a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800503e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005042:	633b      	str	r3, [r7, #48]	; 0x30
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504a:	d036      	beq.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005052:	d86b      	bhi.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800505a:	d02b      	beq.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005062:	d863      	bhi.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506a:	d01b      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005072:	d85b      	bhi.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005082:	e053      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005084:	f107 0320 	add.w	r3, r7, #32
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff f83b 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005092:	e04e      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff f99d 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80050a2:	e046      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a4:	f107 0308 	add.w	r3, r7, #8
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff faff 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80050b2:	e03e      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80050b4:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80050b8:	e03b      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d10c      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	08db      	lsrs	r3, r3, #3
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	4a39      	ldr	r2, [pc, #228]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	e01e      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f8:	d106      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d102      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005102:	4b32      	ldr	r3, [pc, #200]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
 8005106:	e010      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005114:	d106      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511c:	d102      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800511e:	4b2c      	ldr	r3, [pc, #176]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
 8005122:	e002      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800512a:	e002      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005130:	bf00      	nop
          }
        }
        break;
 8005132:	f001 bf70 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d108      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005148:	f107 0320 	add.w	r3, r7, #32
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe ffd9 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005156:	f001 bf5e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d108      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f937 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800516e:	f001 bf52 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005176:	f001 bf4e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800517c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2b00      	cmp	r3, #0
 800518a:	d108      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800518c:	f107 0320 	add.w	r3, r7, #32
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe ffb7 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800519a:	f001 bf3c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d108      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff f915 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051b2:	f001 bf30 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ba:	f001 bf2c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80051be:	bf00      	nop
 80051c0:	44020c00 	.word	0x44020c00
 80051c4:	00bb8000 	.word	0x00bb8000
 80051c8:	03d09000 	.word	0x03d09000
 80051cc:	003d0900 	.word	0x003d0900
 80051d0:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80051d4:	4b9d      	ldr	r3, [pc, #628]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80051e6:	f7fc ffd7 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 80051ea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80051ec:	f001 bf13 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80051f0:	4b96      	ldr	r3, [pc, #600]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fc:	d10a      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff f8e5 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	e043      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005214:	4b8d      	ldr	r3, [pc, #564]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005220:	d10a      	bne.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	2b02      	cmp	r3, #2
 8005226:	d107      	bne.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005228:	f107 0308 	add.w	r3, r7, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fa3d 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
 8005236:	e031      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005238:	4b84      	ldr	r3, [pc, #528]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d10c      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	2b03      	cmp	r3, #3
 8005248:	d109      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800524a:	4b80      	ldr	r3, [pc, #512]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	08db      	lsrs	r3, r3, #3
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	4a7e      	ldr	r2, [pc, #504]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
 800525c:	e01e      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800525e:	4b7b      	ldr	r3, [pc, #492]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526a:	d105      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2b04      	cmp	r3, #4
 8005270:	d102      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005272:	4b78      	ldr	r3, [pc, #480]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
 8005276:	e011      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005278:	4b74      	ldr	r3, [pc, #464]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800527a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d106      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b05      	cmp	r3, #5
 800528a:	d103      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800528c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
 8005292:	e003      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005298:	f001 bebd 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800529c:	f001 bebb 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80052a0:	4b6a      	ldr	r3, [pc, #424]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80052a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80052b2:	f7fc ff5b 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80052b6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80052b8:	f001 bead 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80052bc:	4b63      	ldr	r3, [pc, #396]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c8:	d10a      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d107      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff f87f 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	e03d      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d108      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052e6:	f107 0308 	add.w	r3, r7, #8
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff f9de 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f4:	f001 be8f 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80052f8:	4b54      	ldr	r3, [pc, #336]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d10c      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2b18      	cmp	r3, #24
 8005308:	d109      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800530a:	4b50      	ldr	r3, [pc, #320]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	4a4e      	ldr	r2, [pc, #312]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	e01e      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800531e:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532a:	d105      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	2b20      	cmp	r3, #32
 8005330:	d102      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005332:	4b48      	ldr	r3, [pc, #288]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
 8005336:	e011      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005338:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800533a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d106      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b28      	cmp	r3, #40	; 0x28
 800534a:	d103      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800534c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
 8005352:	e003      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005358:	f001 be5d 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800535c:	f001 be5b 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005360:	4b3a      	ldr	r3, [pc, #232]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005366:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800536a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005372:	f7fc fefb 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005376:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005378:	f001 be4d 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800537c:	4b33      	ldr	r3, [pc, #204]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005388:	d10a      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d107      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff f81f 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
 800539e:	e045      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80053a0:	4b2a      	ldr	r3, [pc, #168]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ac:	d10a      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	d107      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f977 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
 80053c2:	e033      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80053c4:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d10c      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2bc0      	cmp	r3, #192	; 0xc0
 80053d4:	d109      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053d6:	4b1d      	ldr	r3, [pc, #116]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	08db      	lsrs	r3, r3, #3
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80053e2:	fa22 f303 	lsr.w	r3, r2, r3
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	e020      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80053ea:	4b18      	ldr	r3, [pc, #96]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f6:	d106      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	d102      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
 8005404:	e012      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d107      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800541a:	d103      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800541c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
 8005422:	e003      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005428:	f001 bdf5 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800542c:	f001 bdf3 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005436:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800543a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005442:	f7fc fe93 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005446:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005448:	f001 bde5 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800544c:	44020c00 	.word	0x44020c00
 8005450:	03d09000 	.word	0x03d09000
 8005454:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005458:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005464:	d10b      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe ffb0 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
 800547c:	e047      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800547e:	4b97      	ldr	r3, [pc, #604]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800548a:	d10b      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005492:	d107      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff f907 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	e034      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80054a4:	4b8d      	ldr	r3, [pc, #564]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d10d      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054b6:	d109      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054b8:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	08db      	lsrs	r3, r3, #3
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	4a87      	ldr	r2, [pc, #540]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	e020      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80054cc:	4b83      	ldr	r3, [pc, #524]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d8:	d106      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d102      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80054e2:	4b80      	ldr	r3, [pc, #512]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
 80054e6:	e012      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80054e8:	4b7c      	ldr	r3, [pc, #496]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d107      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80054fc:	d103      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	637b      	str	r3, [r7, #52]	; 0x34
 8005504:	e003      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800550a:	f001 bd84 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800550e:	f001 bd82 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005512:	4b72      	ldr	r3, [pc, #456]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005518:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800551c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005524:	f7fc fe22 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005528:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800552a:	f001 bd74 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800552e:	4b6b      	ldr	r3, [pc, #428]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800553a:	d10b      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005542:	d107      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005544:	f107 0314 	add.w	r3, r7, #20
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe ff45 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	e047      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005554:	4b61      	ldr	r3, [pc, #388]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005560:	d10b      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005568:	d107      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f89c 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
 8005578:	e034      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800557a:	4b58      	ldr	r3, [pc, #352]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d10d      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800558c:	d109      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800558e:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	08db      	lsrs	r3, r3, #3
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	4a51      	ldr	r2, [pc, #324]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
 80055a0:	e020      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80055a2:	4b4e      	ldr	r3, [pc, #312]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ae:	d106      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b6:	d102      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80055b8:	4b4a      	ldr	r3, [pc, #296]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
 80055bc:	e012      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80055be:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d107      	bne.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055d2:	d103      	bne.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80055d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
 80055da:	e003      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055e0:	f001 bd19 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055e4:	f001 bd17 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80055e8:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055ee:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80055fa:	f7fc fdb7 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80055fe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005600:	f001 bd09 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005604:	4b35      	ldr	r3, [pc, #212]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800560c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005610:	d10b      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005618:	d107      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800561a:	f107 0314 	add.w	r3, r7, #20
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe feda 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
 8005628:	e047      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800562a:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005636:	d10b      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d107      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005640:	f107 0308 	add.w	r3, r7, #8
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff f831 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
 800564e:	e034      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005650:	4b22      	ldr	r3, [pc, #136]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d10d      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005662:	d109      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	08db      	lsrs	r3, r3, #3
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	e020      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005678:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005684:	d106      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568c:	d102      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	e012      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d107      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80056a8:	d103      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056b6:	f001 bcae 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80056ba:	f001 bcac 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80056c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056c4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fc fd4c 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80056d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80056d6:	f001 bc9e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80056da:	bf00      	nop
 80056dc:	44020c00 	.word	0x44020c00
 80056e0:	03d09000 	.word	0x03d09000
 80056e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80056e8:	4ba0      	ldr	r3, [pc, #640]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f4:	d10b      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056fc:	d107      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056fe:	f107 0314 	add.w	r3, r7, #20
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fe68 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
 800570c:	e047      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800570e:	4b97      	ldr	r3, [pc, #604]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800571a:	d10b      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005722:	d107      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe ffbf 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	e034      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8005734:	4b8d      	ldr	r3, [pc, #564]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d10d      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005746:	d109      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005748:	4b88      	ldr	r3, [pc, #544]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	4a87      	ldr	r2, [pc, #540]	; (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
 800575a:	e020      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800575c:	4b83      	ldr	r3, [pc, #524]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005768:	d106      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005770:	d102      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005772:	4b80      	ldr	r3, [pc, #512]	; (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
 8005776:	e012      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8005778:	4b7c      	ldr	r3, [pc, #496]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800577a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800578c:	d103      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
 8005794:	e003      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800579a:	f001 bc3c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800579e:	f001 bc3a 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80057a2:	4b72      	ldr	r3, [pc, #456]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80057a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057a8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7fc fcda 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80057b8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80057ba:	f001 bc2c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80057be:	4b6b      	ldr	r3, [pc, #428]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d2:	d107      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe fdfd 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
 80057e2:	e047      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80057e4:	4b61      	ldr	r3, [pc, #388]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f0:	d10b      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f8:	d107      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe ff54 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
 8005808:	e034      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800580a:	4b58      	ldr	r3, [pc, #352]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d10d      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800581c:	d109      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800581e:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	08db      	lsrs	r3, r3, #3
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	4a51      	ldr	r2, [pc, #324]	; (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
 8005830:	e020      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8005832:	4b4e      	ldr	r3, [pc, #312]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800583a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005846:	d102      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8005848:	4b4a      	ldr	r3, [pc, #296]	; (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	e012      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d107      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005862:	d103      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	e003      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005870:	f001 bbd1 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005874:	f001 bbcf 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8005878:	4b3c      	ldr	r3, [pc, #240]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800587a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800587e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005882:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800588a:	f7fc fc6f 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 800588e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8005890:	f001 bbc1 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005894:	4b35      	ldr	r3, [pc, #212]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800589c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a0:	d10b      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058a8:	d107      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058aa:	f107 0314 	add.w	r3, r7, #20
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fd92 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
 80058b8:	e047      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c6:	d10b      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ce:	d107      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058d0:	f107 0308 	add.w	r3, r7, #8
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fee9 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	e034      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80058e0:	4b22      	ldr	r3, [pc, #136]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d10d      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f2:	d109      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058f4:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	08db      	lsrs	r3, r3, #3
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	e020      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8005908:	4b18      	ldr	r3, [pc, #96]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005914:	d106      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800591c:	d102      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800591e:	4b15      	ldr	r3, [pc, #84]	; (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
 8005922:	e012      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8005924:	4b11      	ldr	r3, [pc, #68]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d107      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005938:	d103      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
 8005940:	e003      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005946:	f001 bb66 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800594a:	f001 bb64 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005954:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8005958:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fc fc04 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005964:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8005966:	f001 bb56 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800596a:	bf00      	nop
 800596c:	44020c00 	.word	0x44020c00
 8005970:	03d09000 	.word	0x03d09000
 8005974:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005978:	4ba1      	ldr	r3, [pc, #644]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005984:	d10b      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800598c:	d107      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800598e:	f107 0314 	add.w	r3, r7, #20
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fd20 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	637b      	str	r3, [r7, #52]	; 0x34
 800599c:	e047      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800599e:	4b98      	ldr	r3, [pc, #608]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059aa:	d10b      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b2:	d107      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b4:	f107 0308 	add.w	r3, r7, #8
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fe77 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
 80059c2:	e034      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80059c4:	4b8e      	ldr	r3, [pc, #568]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d10d      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059d6:	d109      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059d8:	4b89      	ldr	r3, [pc, #548]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	4a88      	ldr	r2, [pc, #544]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ea:	e020      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80059ec:	4b84      	ldr	r3, [pc, #528]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f8:	d106      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a00:	d102      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8005a02:	4b81      	ldr	r3, [pc, #516]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
 8005a06:	e012      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005a08:	4b7d      	ldr	r3, [pc, #500]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d107      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8005a1c:	d103      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8005a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a2a:	f001 baf4 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a2e:	f001 baf2 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8005a32:	4b73      	ldr	r3, [pc, #460]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005a34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a44:	f7fc fb92 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005a48:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a4a:	f001 bae4 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8005a4e:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5a:	d10a      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0314 	add.w	r3, r7, #20
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fcb6 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a70:	e043      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a7e:	d10a      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d107      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fe0e 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	e031      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8005a96:	4b5a      	ldr	r3, [pc, #360]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d109      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aa8:	4b55      	ldr	r3, [pc, #340]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	4a54      	ldr	r2, [pc, #336]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	e01e      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8005abc:	4b50      	ldr	r3, [pc, #320]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac8:	d105      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad4:	e011      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8005ad6:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d103      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	e003      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af6:	f001 ba8e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005afa:	f001 ba8c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8005afe:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fc fb2c 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005b14:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b16:	f001 ba7e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b26:	d10a      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b2e:	f107 0314 	add.w	r3, r7, #20
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fc50 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3c:	e043      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8005b3e:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4a:	d10a      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d107      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fda8 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b60:	e031      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d10c      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d109      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b74:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
 8005b86:	e01e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8005b88:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d105      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	d102      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba0:	e011      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d106      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2b50      	cmp	r3, #80	; 0x50
 8005bb4:	d103      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc2:	f001 ba28 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005bc6:	f001 ba26 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bd0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005bdc:	f7fc faf2 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8005be0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005be2:	f001 ba18 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bec:	d10e      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fbf0 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bfc:	f001 ba0b 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c00:	44020c00 	.word	0x44020c00
 8005c04:	03d09000 	.word	0x03d09000
 8005c08:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c12:	d108      	bne.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c14:	f107 0308 	add.w	r3, r7, #8
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe fd47 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c22:	f001 b9f8 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005c26:	4ba4      	ldr	r3, [pc, #656]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d10d      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c38:	d109      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c3a:	4b9f      	ldr	r3, [pc, #636]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	4a9d      	ldr	r2, [pc, #628]	; (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	e020      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005c4e:	4b9a      	ldr	r3, [pc, #616]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c62:	d102      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8005c64:	4b96      	ldr	r3, [pc, #600]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
 8005c68:	e012      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005c6a:	4b93      	ldr	r3, [pc, #588]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d107      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005c7e:	d103      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8005c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
 8005c86:	e003      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c8c:	f001 b9c3 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c90:	f001 b9c1 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005c94:	4b88      	ldr	r3, [pc, #544]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005ca6:	f7fc fa45 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8005caa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005cac:	f001 b9b3 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d104      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fc f911 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8005cba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cbc:	f001 b9ab 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d108      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fb84 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cd4:	f001 b99f 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005cd8:	4b77      	ldr	r3, [pc, #476]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce4:	d105      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8005cec:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf0:	e023      	b.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005cf2:	4b71      	ldr	r3, [pc, #452]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d109      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d04:	4b6c      	ldr	r3, [pc, #432]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	4a6b      	ldr	r2, [pc, #428]	; (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
 8005d16:	e010      	b.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005d18:	4b67      	ldr	r3, [pc, #412]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d24:	d105      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8005d2c:	4b64      	ldr	r3, [pc, #400]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d30:	e003      	b.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d36:	f001 b96e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d3a:	f001 b96c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005d3e:	4b5e      	ldr	r3, [pc, #376]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005d4a:	4b5b      	ldr	r3, [pc, #364]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d106      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	e012      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005d66:	4b54      	ldr	r3, [pc, #336]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d74:	d106      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d103      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8005d7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
 8005d82:	e003      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8005d88:	f001 b945 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d8c:	f001 b943 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d90:	4b49      	ldr	r3, [pc, #292]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005d92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d9a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005da2:	f7fc f9e3 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005da6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005da8:	f001 b935 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d108      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fc77 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc2:	f001 b928 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005dc6:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d10d      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd8:	d109      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dda:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	08db      	lsrs	r3, r3, #3
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	4a35      	ldr	r2, [pc, #212]	; (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
 8005dec:	e011      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005dee:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfa:	d106      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e02:	d102      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8005e04:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
 8005e08:	e003      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e0e:	f001 b902 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e12:	f001 b900 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005e16:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005e18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fc f9a0 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005e2c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e2e:	f001 b8f2 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e38:	d108      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e3a:	f107 0308 	add.w	r3, r7, #8
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fc34 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e48:	f001 b8e5 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005e4c:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d10d      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e60:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	e011      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005e74:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d106      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e88:	d102      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e94:	f001 b8bf 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e98:	f001 b8bd 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005e9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ea2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005eae:	f7fc f989 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8005eb2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005eb4:	f001 b8af 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005eb8:	44020c00 	.word	0x44020c00
 8005ebc:	03d09000 	.word	0x03d09000
 8005ec0:	003d0900 	.word	0x003d0900
 8005ec4:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed0:	f107 0308 	add.w	r3, r7, #8
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fbe9 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ede:	f001 b89a 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005ee2:	4b9f      	ldr	r3, [pc, #636]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d10d      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef4:	d109      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ef6:	4b9a      	ldr	r3, [pc, #616]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	08db      	lsrs	r3, r3, #3
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	4a98      	ldr	r2, [pc, #608]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
 8005f08:	e011      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8005f0a:	4b95      	ldr	r3, [pc, #596]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d106      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f1e:	d102      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8005f20:	4b91      	ldr	r3, [pc, #580]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
 8005f24:	e003      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f2a:	f001 b874 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f2e:	f001 b872 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005f32:	4b8b      	ldr	r3, [pc, #556]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005f44:	f7fc f93e 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8005f48:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f4a:	f001 b864 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f54:	d108      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fba6 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f64:	f001 b857 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005f68:	4b7d      	ldr	r3, [pc, #500]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d10d      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f7a:	d109      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f7c:	4b78      	ldr	r3, [pc, #480]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	08db      	lsrs	r3, r3, #3
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	4a77      	ldr	r2, [pc, #476]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8e:	e011      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005f90:	4b73      	ldr	r3, [pc, #460]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9c:	d106      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fa4:	d102      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8005fa6:	4b70      	ldr	r3, [pc, #448]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005faa:	e003      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb0:	f001 b831 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005fb4:	f001 b82f 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005fb8:	4b69      	ldr	r3, [pc, #420]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005fba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fbe:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fca:	f7fc f8cf 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8005fce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fd0:	f001 b821 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fda:	d108      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fdc:	f107 0308 	add.w	r3, r7, #8
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fb63 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fea:	f001 b814 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005fee:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d10e      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006000:	d10a      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006002:	4b57      	ldr	r3, [pc, #348]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	4a55      	ldr	r2, [pc, #340]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800600e:	fa22 f303 	lsr.w	r3, r2, r3
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006014:	f000 bfff 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800601c:	f000 bffb 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006020:	4b4f      	ldr	r3, [pc, #316]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006022:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006032:	d056      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800603a:	f200 808b 	bhi.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006044:	d03e      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604c:	f200 8082 	bhi.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006056:	d027      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605e:	d879      	bhi.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006066:	d017      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606e:	d871      	bhi.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607c:	d004      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800607e:	e069      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006080:	f7fc f8a0 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8006084:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006086:	e068      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe f9a3 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006096:	e060      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006098:	f107 0308 	add.w	r3, r7, #8
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fb05 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060a6:	e058      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060a8:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80060aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d103      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80060b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ba:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80060bc:	e04d      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060c2:	e04a      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80060c4:	4b26      	ldr	r3, [pc, #152]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80060c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d2:	d103      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80060d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80060da:	e03e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060e0:	e03b      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060e2:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80060e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060e8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d10c      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006100:	4b17      	ldr	r3, [pc, #92]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	08db      	lsrs	r3, r3, #3
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
 8006112:	e01e      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800611c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006120:	d106      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006128:	d102      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
 800612e:	e010      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613c:	d106      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006144:	d102      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
 800614a:	e002      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006150:	e003      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006152:	e002      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006158:	bf00      	nop
          }
        }
        break;
 800615a:	f000 bf5c 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800615e:	bf00      	nop
 8006160:	44020c00 	.word	0x44020c00
 8006164:	03d09000 	.word	0x03d09000
 8006168:	003d0900 	.word	0x003d0900
 800616c:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006170:	4b9e      	ldr	r3, [pc, #632]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006172:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006176:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006182:	d056      	beq.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800618a:	f200 808b 	bhi.w	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006194:	d03e      	beq.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619c:	f200 8082 	bhi.w	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061a6:	d027      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061ae:	d879      	bhi.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b6:	d017      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061be:	d871      	bhi.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061cc:	d004      	beq.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80061ce:	e069      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80061d0:	f7fb ffcc 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80061d4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80061d6:	e068      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe f8fb 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80061e6:	e060      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fa5d 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80061f6:	e058      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061f8:	4b7c      	ldr	r3, [pc, #496]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d103      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800620c:	e04d      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006212:	e04a      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006214:	4b75      	ldr	r3, [pc, #468]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800621a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800621e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006222:	d103      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006224:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800622a:	e03e      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006230:	e03b      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006232:	4b6e      	ldr	r3, [pc, #440]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006238:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800623e:	4b6b      	ldr	r3, [pc, #428]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d109      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006250:	4b66      	ldr	r3, [pc, #408]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	4a65      	ldr	r2, [pc, #404]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	e01e      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006264:	4b61      	ldr	r3, [pc, #388]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800626c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006270:	d106      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d102      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800627a:	4b5e      	ldr	r3, [pc, #376]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
 800627e:	e010      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006280:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800628c:	d106      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006294:	d102      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006296:	4b58      	ldr	r3, [pc, #352]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
 800629a:	e002      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80062a2:	e002      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80062a8:	bf00      	nop
          }
        }
        break;
 80062aa:	f000 beb4 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80062ae:	4b4f      	ldr	r3, [pc, #316]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80062b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80062b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80062b8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c0:	d056      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c8:	f200 808b 	bhi.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062d2:	d03e      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062da:	f200 8082 	bhi.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062e4:	d027      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062ec:	d879      	bhi.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f4:	d017      	beq.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062fc:	d871      	bhi.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630a:	d004      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800630c:	e069      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800630e:	f7fb ff59 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8006312:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006314:	e068      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006316:	f107 0314 	add.w	r3, r7, #20
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe f85c 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006324:	e060      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe f9be 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006334:	e058      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006336:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b02      	cmp	r3, #2
 8006342:	d103      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800634a:	e04d      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006350:	e04a      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006360:	d103      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006362:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006366:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006368:	e03e      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800636e:	e03b      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006370:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006376:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d10c      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800638e:	4b17      	ldr	r3, [pc, #92]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	08db      	lsrs	r3, r3, #3
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
 80063a0:	e01e      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ae:	d106      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d102      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
 80063bc:	e010      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ca:	d106      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d2:	d102      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80063de:	e003      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063e6:	bf00      	nop
          }
        }
        break;
 80063e8:	f000 be15 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063ec:	44020c00 	.word	0x44020c00
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	003d0900 	.word	0x003d0900
 80063f8:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80063fc:	4b9e      	ldr	r3, [pc, #632]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006402:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8006406:	633b      	str	r3, [r7, #48]	; 0x30
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800640e:	d056      	beq.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006416:	f200 808b 	bhi.w	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006420:	d03e      	beq.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006428:	f200 8082 	bhi.w	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006432:	d027      	beq.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800643a:	d879      	bhi.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006442:	d017      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800644a:	d871      	bhi.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006458:	d004      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800645a:	e069      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800645c:	f7fb feb2 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8006460:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006462:	e068      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd ffb5 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006472:	e060      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006474:	f107 0308 	add.w	r3, r7, #8
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe f917 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006482:	e058      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006484:	4b7c      	ldr	r3, [pc, #496]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d103      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006498:	e04d      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800649e:	e04a      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80064a0:	4b75      	ldr	r3, [pc, #468]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80064a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ae:	d103      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80064b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80064b6:	e03e      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064bc:	e03b      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064be:	4b6e      	ldr	r3, [pc, #440]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80064c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064ca:	4b6b      	ldr	r3, [pc, #428]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d10c      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064dc:	4b66      	ldr	r3, [pc, #408]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	4a65      	ldr	r2, [pc, #404]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
 80064ee:	e01e      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064f0:	4b61      	ldr	r3, [pc, #388]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fc:	d106      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d102      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006506:	4b5e      	ldr	r3, [pc, #376]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
 800650a:	e010      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800650c:	4b5a      	ldr	r3, [pc, #360]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006518:	d106      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006520:	d102      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006522:	4b58      	ldr	r3, [pc, #352]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
 8006526:	e002      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800652e:	e002      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006534:	bf00      	nop
          }
        }
        break;
 8006536:	f000 bd6e 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800653a:	4b4f      	ldr	r3, [pc, #316]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800653c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006540:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800654c:	d056      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006554:	f200 808b 	bhi.w	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800655e:	d03e      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006566:	f200 8082 	bhi.w	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006570:	d027      	beq.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006578:	d879      	bhi.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006580:	d017      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006588:	d871      	bhi.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006596:	d004      	beq.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8006598:	e069      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800659a:	f7fb fe13 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 800659e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80065a0:	e068      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065a2:	f107 0314 	add.w	r3, r7, #20
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fd ff16 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065b0:	e060      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe f878 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065c0:	e058      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065c2:	4b2d      	ldr	r3, [pc, #180]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80065c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d103      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80065d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80065d6:	e04d      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065dc:	e04a      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065de:	4b26      	ldr	r3, [pc, #152]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80065e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ec:	d103      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80065ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80065f4:	e03e      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065fa:	e03b      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065fc:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80065fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006602:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b02      	cmp	r3, #2
 8006612:	d10c      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800661a:	4b17      	ldr	r3, [pc, #92]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	4a15      	ldr	r2, [pc, #84]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
 800662c:	e01e      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663a:	d106      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d102      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006646:	637b      	str	r3, [r7, #52]	; 0x34
 8006648:	e010      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800664a:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006656:	d106      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665e:	d102      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006660:	4b08      	ldr	r3, [pc, #32]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
 8006664:	e002      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800666c:	e002      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006672:	bf00      	nop
          }
        }
        break;
 8006674:	f000 bccf 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006678:	44020c00 	.word	0x44020c00
 800667c:	03d09000 	.word	0x03d09000
 8006680:	003d0900 	.word	0x003d0900
 8006684:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8006688:	4b9e      	ldr	r3, [pc, #632]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800668a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800668e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006692:	633b      	str	r3, [r7, #48]	; 0x30
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800669a:	d056      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a2:	f200 808b 	bhi.w	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ac:	d03e      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b4:	f200 8082 	bhi.w	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066be:	d027      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c6:	d879      	bhi.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d017      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d6:	d871      	bhi.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e4:	d004      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80066e6:	e069      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80066e8:	f7fb fd6c 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 80066ec:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80066ee:	e068      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f0:	f107 0314 	add.w	r3, r7, #20
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd fe6f 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066fe:	e060      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4618      	mov	r0, r3
 8006706:	f7fd ffd1 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800670e:	e058      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006710:	4b7c      	ldr	r3, [pc, #496]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d103      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006724:	e04d      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800672a:	e04a      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800672c:	4b75      	ldr	r3, [pc, #468]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800672e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800673a:	d103      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800673c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006742:	e03e      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006748:	e03b      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800674a:	4b6e      	ldr	r3, [pc, #440]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800674c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006750:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006756:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	d10c      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006768:	4b66      	ldr	r3, [pc, #408]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	4a65      	ldr	r2, [pc, #404]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
 800677a:	e01e      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800677c:	4b61      	ldr	r3, [pc, #388]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006788:	d106      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006790:	d102      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006792:	4b5e      	ldr	r3, [pc, #376]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
 8006796:	e010      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006798:	4b5a      	ldr	r3, [pc, #360]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a4:	d106      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ac:	d102      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80067ae:	4b58      	ldr	r3, [pc, #352]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	e002      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80067b8:	e003      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80067ba:	e002      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067c0:	bf00      	nop
          }
        }
        break;
 80067c2:	f000 bc28 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80067c6:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80067c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80067d2:	4b4c      	ldr	r3, [pc, #304]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067de:	d106      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80067e6:	4b4a      	ldr	r3, [pc, #296]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80067ea:	f000 bc14 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f4:	d108      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067f6:	f107 0320 	add.w	r3, r7, #32
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd fc82 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006804:	f000 bc07 	b.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680e:	d107      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006810:	f107 0314 	add.w	r3, r7, #20
 8006814:	4618      	mov	r0, r3
 8006816:	f7fd fddf 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800681e:	e3fa      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006824:	e3f7      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006826:	4b37      	ldr	r3, [pc, #220]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	633b      	str	r3, [r7, #48]	; 0x30
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	2b04      	cmp	r3, #4
 8006836:	d861      	bhi.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006855 	.word	0x08006855
 8006844:	08006865 	.word	0x08006865
 8006848:	08006875 	.word	0x08006875
 800684c:	08006885 	.word	0x08006885
 8006850:	0800688b 	.word	0x0800688b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006854:	f107 0320 	add.w	r3, r7, #32
 8006858:	4618      	mov	r0, r3
 800685a:	f7fd fc53 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006862:	e04e      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006864:	f107 0314 	add.w	r3, r7, #20
 8006868:	4618      	mov	r0, r3
 800686a:	f7fd fdb5 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006872:	e046      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006874:	f107 0308 	add.w	r3, r7, #8
 8006878:	4618      	mov	r0, r3
 800687a:	f7fd ff17 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006882:	e03e      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006888:	e03b      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800688a:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800688c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006890:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006896:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d10c      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068a8:	4b16      	ldr	r3, [pc, #88]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	08db      	lsrs	r3, r3, #3
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	4a15      	ldr	r2, [pc, #84]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80068b4:	fa22 f303 	lsr.w	r3, r2, r3
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	e01e      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c8:	d106      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d0:	d102      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
 80068d6:	e010      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e4:	d106      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ec:	d102      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80068ee:	4b08      	ldr	r3, [pc, #32]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	e002      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80068f8:	e003      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80068fa:	e002      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006900:	bf00      	nop
          }
        }
        break;
 8006902:	e388      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006904:	44020c00 	.word	0x44020c00
 8006908:	03d09000 	.word	0x03d09000
 800690c:	003d0900 	.word	0x003d0900
 8006910:	017d7840 	.word	0x017d7840
 8006914:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006918:	4ba9      	ldr	r3, [pc, #676]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800691a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800691e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	2b20      	cmp	r3, #32
 8006928:	f200 809a 	bhi.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	080069b9 	.word	0x080069b9
 8006938:	08006a61 	.word	0x08006a61
 800693c:	08006a61 	.word	0x08006a61
 8006940:	08006a61 	.word	0x08006a61
 8006944:	08006a61 	.word	0x08006a61
 8006948:	08006a61 	.word	0x08006a61
 800694c:	08006a61 	.word	0x08006a61
 8006950:	08006a61 	.word	0x08006a61
 8006954:	080069c9 	.word	0x080069c9
 8006958:	08006a61 	.word	0x08006a61
 800695c:	08006a61 	.word	0x08006a61
 8006960:	08006a61 	.word	0x08006a61
 8006964:	08006a61 	.word	0x08006a61
 8006968:	08006a61 	.word	0x08006a61
 800696c:	08006a61 	.word	0x08006a61
 8006970:	08006a61 	.word	0x08006a61
 8006974:	080069d9 	.word	0x080069d9
 8006978:	08006a61 	.word	0x08006a61
 800697c:	08006a61 	.word	0x08006a61
 8006980:	08006a61 	.word	0x08006a61
 8006984:	08006a61 	.word	0x08006a61
 8006988:	08006a61 	.word	0x08006a61
 800698c:	08006a61 	.word	0x08006a61
 8006990:	08006a61 	.word	0x08006a61
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006a61 	.word	0x08006a61
 800699c:	08006a61 	.word	0x08006a61
 80069a0:	08006a61 	.word	0x08006a61
 80069a4:	08006a61 	.word	0x08006a61
 80069a8:	08006a61 	.word	0x08006a61
 80069ac:	08006a61 	.word	0x08006a61
 80069b0:	08006a61 	.word	0x08006a61
 80069b4:	080069ef 	.word	0x080069ef
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069b8:	f107 0320 	add.w	r3, r7, #32
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fd fba1 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069c6:	e04e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fd fd03 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069d6:	e046      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d8:	f107 0308 	add.w	r3, r7, #8
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fd fe65 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069e6:	e03e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80069e8:	4b76      	ldr	r3, [pc, #472]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069ec:	e03b      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069ee:	4b74      	ldr	r3, [pc, #464]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80069f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069fa:	4b71      	ldr	r3, [pc, #452]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a0c:	4b6c      	ldr	r3, [pc, #432]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	08db      	lsrs	r3, r3, #3
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	4a6c      	ldr	r2, [pc, #432]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	e01e      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a20:	4b67      	ldr	r3, [pc, #412]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d106      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d102      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a36:	4b65      	ldr	r3, [pc, #404]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3a:	e010      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a3c:	4b60      	ldr	r3, [pc, #384]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a48:	d106      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a50:	d102      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006a52:	4b5f      	ldr	r3, [pc, #380]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006a5c:	e003      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8006a5e:	e002      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a64:	bf00      	nop
          }
        }
        break;
 8006a66:	e2d6      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006a68:	4b55      	ldr	r3, [pc, #340]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	d031      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	d866      	bhi.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	2bc0      	cmp	r3, #192	; 0xc0
 8006a88:	d027      	beq.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2bc0      	cmp	r3, #192	; 0xc0
 8006a8e:	d860      	bhi.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d019      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	2b80      	cmp	r3, #128	; 0x80
 8006a9a:	d85a      	bhi.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d008      	beq.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8006aa8:	e053      	b.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006aaa:	f107 0320 	add.w	r3, r7, #32
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd fb28 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ab8:	e04e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aba:	f107 0314 	add.w	r3, r7, #20
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd fc8a 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ac8:	e046      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fdec 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ad8:	e03e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006ada:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ade:	e03b      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ae0:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ae6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aec:	4b34      	ldr	r3, [pc, #208]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d10c      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006afe:	4b30      	ldr	r3, [pc, #192]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	e01e      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b12:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b26:	d102      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b28:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	e010      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b2e:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b42:	d102      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
 8006b48:	e002      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8006b50:	e002      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b56:	bf00      	nop
          }
        }
        break;
 8006b58:	e25d      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8006b5a:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b60:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006b64:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7fb fb14 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 8006b70:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006b72:	e250      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006b74:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b80:	d10b      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b88:	d107      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fd fc22 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34
 8006b98:	e04f      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba6:	d115      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bae:	d111      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb0:	f107 0308 	add.w	r3, r7, #8
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd fd79 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbe:	e03c      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8006bc0:	44020c00 	.word	0x44020c00
 8006bc4:	00bb8000 	.word	0x00bb8000
 8006bc8:	03d09000 	.word	0x03d09000
 8006bcc:	003d0900 	.word	0x003d0900
 8006bd0:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006bd4:	4b94      	ldr	r3, [pc, #592]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d10d      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006be6:	d109      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006be8:	4b8f      	ldr	r3, [pc, #572]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	4a8e      	ldr	r2, [pc, #568]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfa:	e01e      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006bfc:	4b8a      	ldr	r3, [pc, #552]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8006c12:	4b87      	ldr	r3, [pc, #540]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
 8006c16:	e010      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8006c18:	4b83      	ldr	r3, [pc, #524]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8006c2e:	4b81      	ldr	r3, [pc, #516]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
 8006c32:	e002      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c38:	e1ed      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c3a:	e1ec      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8006c3c:	4b7a      	ldr	r3, [pc, #488]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c4e:	f7fb fab9 	bl	80021c4 <HAL_RCC_GetPCLK3Freq>
 8006c52:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006c54:	e1df      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8006c56:	4b74      	ldr	r3, [pc, #464]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c62:	d10b      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6c:	f107 0314 	add.w	r3, r7, #20
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd fbb1 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7a:	e045      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8006c7c:	4b6a      	ldr	r3, [pc, #424]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c88:	d10b      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fd fd08 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca0:	e032      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8006ca2:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d10d      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cb4:	d109      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cb6:	4b5c      	ldr	r3, [pc, #368]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	08db      	lsrs	r3, r3, #3
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	4a5a      	ldr	r2, [pc, #360]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc8:	e01e      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8006cca:	4b57      	ldr	r3, [pc, #348]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8006ce0:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	e010      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8006ce6:	4b50      	ldr	r3, [pc, #320]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf2:	d106      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006d00:	e002      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d06:	e186      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d08:	e185      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d0a:	4b47      	ldr	r3, [pc, #284]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d10:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006d14:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d1c:	f7fb fa3c 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 8006d20:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006d22:	e178      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8006d24:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d30:	d10b      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d38:	d107      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d3a:	f107 0314 	add.w	r3, r7, #20
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fd fb4a 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	e045      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8006d4a:	4b37      	ldr	r3, [pc, #220]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d56:	d10b      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5e:	d107      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d60:	f107 0308 	add.w	r3, r7, #8
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fd fca1 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6e:	e032      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8006d70:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006d82:	d109      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	08db      	lsrs	r3, r3, #3
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	e01e      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dac:	d102      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8006dae:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
 8006db2:	e010      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc0:	d106      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006dc8:	d102      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8006dca:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dce:	e002      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dd4:	e11f      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dd6:	e11e      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006dd8:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d85f      	bhi.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8006dea:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e09 	.word	0x08006e09
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e39 	.word	0x08006e39

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006e00:	f7fb f998 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8006e04:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006e06:	e053      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e08:	f107 0320 	add.w	r3, r7, #32
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fd f979 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e16:	e04b      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e18:	f107 0314 	add.w	r3, r7, #20
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fd fadb 	bl	80043d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e26:	e043      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006e28:	44020c00 	.word	0x44020c00
 8006e2c:	03d09000 	.word	0x03d09000
 8006e30:	003d0900 	.word	0x003d0900
 8006e34:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e38:	4b79      	ldr	r3, [pc, #484]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e44:	4b76      	ldr	r3, [pc, #472]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d10c      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e56:	4b72      	ldr	r3, [pc, #456]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	08db      	lsrs	r3, r3, #3
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	4a70      	ldr	r2, [pc, #448]	; (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
 8006e68:	e01e      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e6a:	4b6d      	ldr	r3, [pc, #436]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e76:	d106      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d102      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e80:	4b69      	ldr	r3, [pc, #420]	; (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
 8006e84:	e010      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e86:	4b66      	ldr	r3, [pc, #408]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e92:	d106      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9a:	d102      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e9c:	4b63      	ldr	r3, [pc, #396]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea0:	e002      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006ea8:	e002      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eae:	bf00      	nop
          }
        }
        break;
 8006eb0:	e0b1      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006eb2:	4b5b      	ldr	r3, [pc, #364]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006eb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ebc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006ebe:	4b58      	ldr	r3, [pc, #352]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d106      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed8:	e01f      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8006eda:	4b51      	ldr	r3, [pc, #324]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee8:	d106      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d103      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8006ef0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef6:	e010      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8006ef8:	4b49      	ldr	r3, [pc, #292]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f04:	d106      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d103      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8006f0c:	f248 0312 	movw	r3, #32786	; 0x8012
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	e002      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006f18:	e07d      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f1a:	e07c      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006f1c:	4b40      	ldr	r3, [pc, #256]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006f28:	4b3d      	ldr	r3, [pc, #244]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f34:	d105      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8006f3c:	4b3c      	ldr	r3, [pc, #240]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f40:	e031      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006f42:	4b37      	ldr	r3, [pc, #220]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f4e:	d10a      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d107      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f56:	f107 0320 	add.w	r3, r7, #32
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fd f8d2 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
 8006f64:	e01f      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006f66:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d106      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d103      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8006f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	e011      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006f82:	4b27      	ldr	r3, [pc, #156]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f90:	d106      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	2b30      	cmp	r3, #48	; 0x30
 8006f96:	d103      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8006f98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9e:	e002      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006fa4:	e037      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fa6:	e036      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006faa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d107      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fba:	f107 0320 	add.w	r3, r7, #32
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fd f8a0 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006fc8:	e025      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd6:	d10a      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fde:	f107 0308 	add.w	r3, r7, #8
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fd fb62 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
 8006fec:	e00f      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffa:	d105      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	d102      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
 8007006:	e002      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800700e:	e002      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007014:	bf00      	nop
    }
  }

  return (frequency);
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007018:	4618      	mov	r0, r3
 800701a:	373c      	adds	r7, #60	; 0x3c
 800701c:	46bd      	mov	sp, r7
 800701e:	bd90      	pop	{r4, r7, pc}
 8007020:	44020c00 	.word	0x44020c00
 8007024:	03d09000 	.word	0x03d09000
 8007028:	003d0900 	.word	0x003d0900
 800702c:	017d7840 	.word	0x017d7840
 8007030:	02dc6c00 	.word	0x02dc6c00

08007034 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800703c:	4b48      	ldr	r3, [pc, #288]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a47      	ldr	r2, [pc, #284]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007046:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007048:	f7f9 fe2e 	bl	8000ca8 <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800704e:	e008      	b.n	8007062 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007050:	f7f9 fe2a 	bl	8000ca8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e07a      	b.n	8007158 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007062:	4b3f      	ldr	r3, [pc, #252]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800706e:	4b3c      	ldr	r3, [pc, #240]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007076:	f023 0303 	bic.w	r3, r3, #3
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6852      	ldr	r2, [r2, #4]
 8007082:	0212      	lsls	r2, r2, #8
 8007084:	430a      	orrs	r2, r1
 8007086:	4936      	ldr	r1, [pc, #216]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007088:	4313      	orrs	r3, r2
 800708a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	3b01      	subs	r3, #1
 8007092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	3b01      	subs	r3, #1
 800709c:	025b      	lsls	r3, r3, #9
 800709e:	b29b      	uxth	r3, r3
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	041b      	lsls	r3, r3, #16
 80070aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	061b      	lsls	r3, r3, #24
 80070b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070bc:	4928      	ldr	r1, [pc, #160]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80070c2:	4b27      	ldr	r3, [pc, #156]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	f023 020c 	bic.w	r2, r3, #12
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	4924      	ldr	r1, [pc, #144]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80070d4:	4b22      	ldr	r3, [pc, #136]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	f023 0220 	bic.w	r2, r3, #32
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	491f      	ldr	r1, [pc, #124]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80070e6:	4b1e      	ldr	r3, [pc, #120]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	491c      	ldr	r1, [pc, #112]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80070f4:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	4a19      	ldr	r2, [pc, #100]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007100:	4b17      	ldr	r3, [pc, #92]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007108:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6a12      	ldr	r2, [r2, #32]
 8007110:	00d2      	lsls	r2, r2, #3
 8007112:	4913      	ldr	r1, [pc, #76]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	4a10      	ldr	r2, [pc, #64]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 800711e:	f043 0310 	orr.w	r3, r3, #16
 8007122:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a0d      	ldr	r2, [pc, #52]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 800712a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800712e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007130:	f7f9 fdba 	bl	8000ca8 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007136:	e008      	b.n	800714a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007138:	f7f9 fdb6 	bl	8000ca8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e006      	b.n	8007158 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <RCCEx_PLL2_Config+0x12c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f0      	beq.n	8007138 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0

}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	44020c00 	.word	0x44020c00

08007164 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800716c:	4b48      	ldr	r3, [pc, #288]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a47      	ldr	r2, [pc, #284]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007176:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007178:	f7f9 fd96 	bl	8000ca8 <HAL_GetTick>
 800717c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800717e:	e008      	b.n	8007192 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007180:	f7f9 fd92 	bl	8000ca8 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e07a      	b.n	8007288 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007192:	4b3f      	ldr	r3, [pc, #252]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800719e:	4b3c      	ldr	r3, [pc, #240]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6811      	ldr	r1, [r2, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6852      	ldr	r2, [r2, #4]
 80071b2:	0212      	lsls	r2, r2, #8
 80071b4:	430a      	orrs	r2, r1
 80071b6:	4936      	ldr	r1, [pc, #216]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	630b      	str	r3, [r1, #48]	; 0x30
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	025b      	lsls	r3, r3, #9
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	061b      	lsls	r3, r3, #24
 80071e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071ec:	4928      	ldr	r1, [pc, #160]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071f2:	4b27      	ldr	r3, [pc, #156]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	f023 020c 	bic.w	r2, r3, #12
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	4924      	ldr	r1, [pc, #144]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007200:	4313      	orrs	r3, r2
 8007202:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007204:	4b22      	ldr	r3, [pc, #136]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	f023 0220 	bic.w	r2, r3, #32
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	491f      	ldr	r1, [pc, #124]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007212:	4313      	orrs	r3, r2
 8007214:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007216:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	491c      	ldr	r1, [pc, #112]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007220:	4313      	orrs	r3, r2
 8007222:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007224:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	4a19      	ldr	r2, [pc, #100]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007230:	4b17      	ldr	r3, [pc, #92]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007238:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6a12      	ldr	r2, [r2, #32]
 8007240:	00d2      	lsls	r2, r2, #3
 8007242:	4913      	ldr	r1, [pc, #76]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007244:	4313      	orrs	r3, r2
 8007246:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	4a10      	ldr	r2, [pc, #64]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 800724e:	f043 0310 	orr.w	r3, r3, #16
 8007252:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007254:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a0d      	ldr	r2, [pc, #52]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 800725a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007260:	f7f9 fd22 	bl	8000ca8 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007266:	e008      	b.n	800727a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007268:	f7f9 fd1e 	bl	8000ca8 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e006      	b.n	8007288 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <RCCEx_PLL3_Config+0x12c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	44020c00 	.word	0x44020c00

08007294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e042      	b.n	800732c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7f9 fb15 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2224      	movs	r2, #36	; 0x24
 80072c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0201 	bic.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fe10 	bl	8007f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fc1f 	bl	8007b28 <UART_SetConfig>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e01b      	b.n	800732c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fe8f 	bl	8008048 <UART_CheckIdleState>
 800732a:	4603      	mov	r3, r0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007334:	b480      	push	{r7}
 8007336:	b091      	sub	sp, #68	; 0x44
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	4613      	mov	r3, r2
 8007340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	2b20      	cmp	r3, #32
 800734a:	f040 8088 	bne.w	800745e <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_UART_Transmit_IT+0x26>
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e080      	b.n	8007460 <HAL_UART_Transmit_IT+0x12c>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007368:	2b80      	cmp	r3, #128	; 0x80
 800736a:	d107      	bne.n	800737c <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800737a:	609a      	str	r2, [r3, #8]
    }

    huart->pTxBuffPtr  = pData;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2221      	movs	r2, #33	; 0x21
 80073a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b0:	d12a      	bne.n	8007408 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	d107      	bne.n	80073cc <HAL_UART_Transmit_IT+0x98>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d103      	bne.n	80073cc <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a29      	ldr	r2, [pc, #164]	; (800746c <HAL_UART_Transmit_IT+0x138>)
 80073c8:	679a      	str	r2, [r3, #120]	; 0x78
 80073ca:	e002      	b.n	80073d2 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a28      	ldr	r2, [pc, #160]	; (8007470 <HAL_UART_Transmit_IT+0x13c>)
 80073d0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f2:	637a      	str	r2, [r7, #52]	; 0x34
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e5      	bne.n	80073d2 <HAL_UART_Transmit_IT+0x9e>
 8007406:	e028      	b.n	800745a <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007410:	d107      	bne.n	8007422 <HAL_UART_Transmit_IT+0xee>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a15      	ldr	r2, [pc, #84]	; (8007474 <HAL_UART_Transmit_IT+0x140>)
 800741e:	679a      	str	r2, [r3, #120]	; 0x78
 8007420:	e002      	b.n	8007428 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4a14      	ldr	r2, [pc, #80]	; (8007478 <HAL_UART_Transmit_IT+0x144>)
 8007426:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	613b      	str	r3, [r7, #16]
   return(result);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007446:	623b      	str	r3, [r7, #32]
 8007448:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	69f9      	ldr	r1, [r7, #28]
 800744c:	6a3a      	ldr	r2, [r7, #32]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	61bb      	str	r3, [r7, #24]
   return(result);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3744      	adds	r7, #68	; 0x44
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	08008803 	.word	0x08008803
 8007470:	08008723 	.word	0x08008723
 8007474:	08008661 	.word	0x08008661
 8007478:	080085a9 	.word	0x080085a9

0800747c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007490:	2b20      	cmp	r3, #32
 8007492:	d14b      	bne.n	800752c <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_UART_Receive_IT+0x24>
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e044      	b.n	800752e <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d107      	bne.n	80074c8 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c6:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_UART_Receive_IT+0xbc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d024      	beq.n	800751c <HAL_UART_Receive_IT+0xa0>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <HAL_UART_Receive_IT+0xc0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d01f      	beq.n	800751c <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d018      	beq.n	800751c <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	613b      	str	r3, [r7, #16]
   return(result);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	623b      	str	r3, [r7, #32]
 800750a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	69f9      	ldr	r1, [r7, #28]
 800750e:	6a3a      	ldr	r2, [r7, #32]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	61bb      	str	r3, [r7, #24]
   return(result);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e6      	bne.n	80074ea <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	461a      	mov	r2, r3
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fea2 	bl	800826c <UART_Start_Receive_IT>
 8007528:	4603      	mov	r3, r0
 800752a:	e000      	b.n	800752e <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	3728      	adds	r7, #40	; 0x28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	44002400 	.word	0x44002400
 800753c:	54002400 	.word	0x54002400

08007540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b0ae      	sub	sp, #184	; 0xb8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800756a:	f640 030f 	movw	r3, #2063	; 0x80f
 800756e:	4013      	ands	r3, r2
 8007570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8007574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11b      	bne.n	80075b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800757c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d015      	beq.n	80075b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d105      	bne.n	80075a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8293 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
      }
      return;
 80075b2:	e28d      	b.n	8007ad0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80fd 	beq.w	80077b8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80075be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075c2:	4b7a      	ldr	r3, [pc, #488]	; (80077ac <HAL_UART_IRQHandler+0x26c>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80075ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075ce:	4b78      	ldr	r3, [pc, #480]	; (80077b0 <HAL_UART_IRQHandler+0x270>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80f0 	beq.w	80077b8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d011      	beq.n	8007608 <HAL_UART_IRQHandler+0xc8>
 80075e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f043 0201 	orr.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_UART_IRQHandler+0xf8>
 8007614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2202      	movs	r2, #2
 8007626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762e:	f043 0204 	orr.w	r2, r3, #4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d011      	beq.n	8007668 <HAL_UART_IRQHandler+0x128>
 8007644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2204      	movs	r2, #4
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	f043 0202 	orr.w	r2, r3, #2
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007668:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007680:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007684:	4b49      	ldr	r3, [pc, #292]	; (80077ac <HAL_UART_IRQHandler+0x26c>)
 8007686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2208      	movs	r2, #8
 8007692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	f043 0208 	orr.w	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <HAL_UART_IRQHandler+0x196>
 80076b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 81f9 	beq.w	8007ad4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d013      	beq.n	8007716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772a:	2b40      	cmp	r3, #64	; 0x40
 800772c:	d005      	beq.n	800773a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800772e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007732:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007736:	2b00      	cmp	r3, #0
 8007738:	d02e      	beq.n	8007798 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 feb8 	bl	80084b0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d120      	bne.n	8007790 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d017      	beq.n	8007788 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <HAL_UART_IRQHandler+0x274>)
 8007760:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007768:	4618      	mov	r0, r3
 800776a:	f7f9 fc34 	bl	8000fd6 <HAL_DMA_Abort_IT>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d019      	beq.n	80077a8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800777a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007782:	4610      	mov	r0, r2
 8007784:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007786:	e00f      	b.n	80077a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f9b7 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778e:	e00b      	b.n	80077a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f9b3 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007796:	e007      	b.n	80077a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9af 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80077a6:	e195      	b.n	8007ad4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a8:	bf00      	nop
    return;
 80077aa:	e193      	b.n	8007ad4 <HAL_UART_IRQHandler+0x594>
 80077ac:	10000001 	.word	0x10000001
 80077b0:	04000120 	.word	0x04000120
 80077b4:	0800857d 	.word	0x0800857d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	f040 8129 	bne.w	8007a14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8122 	beq.w	8007a14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 811b 	beq.w	8007a14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2210      	movs	r2, #16
 80077e4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	f040 8091 	bne.w	8007918 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007800:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8007804:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8165 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007814:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8007818:	429a      	cmp	r2, r3
 800781a:	f080 815d 	bcs.w	8007ad8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8007824:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007830:	2b81      	cmp	r3, #129	; 0x81
 8007832:	d060      	beq.n	80078f6 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800785a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800785e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e2      	bne.n	8007834 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800787e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007894:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007898:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e3      	bne.n	800786e <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c4:	f023 0310 	bic.w	r3, r3, #16
 80078c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e4      	bne.n	80078b4 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f9 faf4 	bl	8000ede <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007908:	b29b      	uxth	r3, r3
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	b29b      	uxth	r3, r3
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8fd 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007916:	e0df      	b.n	8007ad8 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007924:	b29b      	uxth	r3, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80d1 	beq.w	8007adc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800793a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80cc 	beq.w	8007adc <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007966:	647b      	str	r3, [r7, #68]	; 0x44
 8007968:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800796c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e4      	bne.n	8007944 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3308      	adds	r3, #8
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	623b      	str	r3, [r7, #32]
   return(result);
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007990:	f023 0301 	bic.w	r3, r3, #1
 8007994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80079a2:	633a      	str	r2, [r7, #48]	; 0x30
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e1      	bne.n	800797a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	69b9      	ldr	r1, [r7, #24]
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	617b      	str	r3, [r7, #20]
   return(result);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e4      	bne.n	80079ca <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a06:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f87f 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a12:	e063      	b.n	8007adc <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <HAL_UART_IRQHandler+0x4fe>
 8007a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fcbc 	bl	80093b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a3c:	e051      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d014      	beq.n	8007a74 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d03a      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
    }
    return;
 8007a72:	e035      	b.n	8007ae0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <HAL_UART_IRQHandler+0x554>
 8007a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 ff2d 	bl	80088ec <UART_EndTransmit_IT>
    return;
 8007a92:	e026      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x574>
 8007aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007aa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fc95 	bl	80093dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ab2:	e016      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d010      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
 8007ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da0c      	bge.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fc7d 	bl	80093c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ace:	e008      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007ad0:	bf00      	nop
 8007ad2:	e006      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007ad4:	bf00      	nop
 8007ad6:	e004      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007ad8:	bf00      	nop
 8007ada:	e002      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007adc:	bf00      	nop
 8007ade:	e000      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007ae0:	bf00      	nop
  }
}
 8007ae2:	37b8      	adds	r7, #184	; 0xb8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b2c:	b094      	sub	sp, #80	; 0x50
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	4b78      	ldr	r3, [pc, #480]	; (8007d20 <UART_SetConfig+0x1f8>)
 8007b3e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4971      	ldr	r1, [pc, #452]	; (8007d24 <UART_SetConfig+0x1fc>)
 8007b60:	4019      	ands	r1, r3
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	68d9      	ldr	r1, [r3, #12]
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	ea40 0301 	orr.w	r3, r0, r1
 8007b82:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4b64      	ldr	r3, [pc, #400]	; (8007d20 <UART_SetConfig+0x1f8>)
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d009      	beq.n	8007ba8 <UART_SetConfig+0x80>
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <UART_SetConfig+0x200>)
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d004      	beq.n	8007ba8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	6a1a      	ldr	r2, [r3, #32]
 8007ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007bb2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	f023 000f 	bic.w	r0, r3, #15
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	ea40 0301 	orr.w	r3, r0, r1
 8007bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b53      	ldr	r3, [pc, #332]	; (8007d2c <UART_SetConfig+0x204>)
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d102      	bne.n	8007be8 <UART_SetConfig+0xc0>
 8007be2:	2301      	movs	r3, #1
 8007be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007be6:	e066      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4b50      	ldr	r3, [pc, #320]	; (8007d30 <UART_SetConfig+0x208>)
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d102      	bne.n	8007bf8 <UART_SetConfig+0xd0>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf6:	e05e      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4b4d      	ldr	r3, [pc, #308]	; (8007d34 <UART_SetConfig+0x20c>)
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d102      	bne.n	8007c08 <UART_SetConfig+0xe0>
 8007c02:	2304      	movs	r3, #4
 8007c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c06:	e056      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b4a      	ldr	r3, [pc, #296]	; (8007d38 <UART_SetConfig+0x210>)
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d102      	bne.n	8007c18 <UART_SetConfig+0xf0>
 8007c12:	2308      	movs	r3, #8
 8007c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c16:	e04e      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	4b47      	ldr	r3, [pc, #284]	; (8007d3c <UART_SetConfig+0x214>)
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d102      	bne.n	8007c28 <UART_SetConfig+0x100>
 8007c22:	2310      	movs	r3, #16
 8007c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c26:	e046      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	4b44      	ldr	r3, [pc, #272]	; (8007d40 <UART_SetConfig+0x218>)
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d102      	bne.n	8007c38 <UART_SetConfig+0x110>
 8007c32:	2320      	movs	r3, #32
 8007c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c36:	e03e      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b41      	ldr	r3, [pc, #260]	; (8007d44 <UART_SetConfig+0x21c>)
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d102      	bne.n	8007c48 <UART_SetConfig+0x120>
 8007c42:	2340      	movs	r3, #64	; 0x40
 8007c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c46:	e036      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	4b3e      	ldr	r3, [pc, #248]	; (8007d48 <UART_SetConfig+0x220>)
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d102      	bne.n	8007c58 <UART_SetConfig+0x130>
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c56:	e02e      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b3b      	ldr	r3, [pc, #236]	; (8007d4c <UART_SetConfig+0x224>)
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d103      	bne.n	8007c6a <UART_SetConfig+0x142>
 8007c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c68:	e025      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b38      	ldr	r3, [pc, #224]	; (8007d50 <UART_SetConfig+0x228>)
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d103      	bne.n	8007c7c <UART_SetConfig+0x154>
 8007c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c7a:	e01c      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4b34      	ldr	r3, [pc, #208]	; (8007d54 <UART_SetConfig+0x22c>)
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d103      	bne.n	8007c8e <UART_SetConfig+0x166>
 8007c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c8c:	e013      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b31      	ldr	r3, [pc, #196]	; (8007d58 <UART_SetConfig+0x230>)
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d103      	bne.n	8007ca0 <UART_SetConfig+0x178>
 8007c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c9e:	e00a      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <UART_SetConfig+0x1f8>)
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d103      	bne.n	8007cb2 <UART_SetConfig+0x18a>
 8007caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb0:	e001      	b.n	8007cb6 <UART_SetConfig+0x18e>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <UART_SetConfig+0x1f8>)
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d005      	beq.n	8007ccc <UART_SetConfig+0x1a4>
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <UART_SetConfig+0x200>)
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	f040 8094 	bne.w	8007df4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cce:	2200      	movs	r2, #0
 8007cd0:	623b      	str	r3, [r7, #32]
 8007cd2:	627a      	str	r2, [r7, #36]	; 0x24
 8007cd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007cd8:	f7fc fe52 	bl	8004980 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cdc:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80f7 	beq.w	8007ed4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	4a1c      	ldr	r2, [pc, #112]	; (8007d5c <UART_SetConfig+0x234>)
 8007cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	4413      	add	r3, r2
 8007d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d305      	bcc.n	8007d16 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d924      	bls.n	8007d60 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d1c:	e069      	b.n	8007df2 <UART_SetConfig+0x2ca>
 8007d1e:	bf00      	nop
 8007d20:	44002400 	.word	0x44002400
 8007d24:	cfff69f3 	.word	0xcfff69f3
 8007d28:	54002400 	.word	0x54002400
 8007d2c:	40013800 	.word	0x40013800
 8007d30:	40004400 	.word	0x40004400
 8007d34:	40004800 	.word	0x40004800
 8007d38:	40004c00 	.word	0x40004c00
 8007d3c:	40005000 	.word	0x40005000
 8007d40:	40006400 	.word	0x40006400
 8007d44:	40007800 	.word	0x40007800
 8007d48:	40007c00 	.word	0x40007c00
 8007d4c:	40008000 	.word	0x40008000
 8007d50:	40006800 	.word	0x40006800
 8007d54:	40006c00 	.word	0x40006c00
 8007d58:	40008400 	.word	0x40008400
 8007d5c:	08009680 	.word	0x08009680
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d62:	2200      	movs	r2, #0
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	61fa      	str	r2, [r7, #28]
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	4a64      	ldr	r2, [pc, #400]	; (8007f00 <UART_SetConfig+0x3d8>)
 8007d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2200      	movs	r2, #0
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	617a      	str	r2, [r7, #20]
 8007d7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d82:	f7f8 fa83 	bl	800028c <__aeabi_uldivmod>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	020b      	lsls	r3, r1, #8
 8007d98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d9c:	0202      	lsls	r2, r0, #8
 8007d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007da0:	6849      	ldr	r1, [r1, #4]
 8007da2:	0849      	lsrs	r1, r1, #1
 8007da4:	2000      	movs	r0, #0
 8007da6:	460c      	mov	r4, r1
 8007da8:	4605      	mov	r5, r0
 8007daa:	eb12 0804 	adds.w	r8, r2, r4
 8007dae:	eb43 0905 	adc.w	r9, r3, r5
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	60fa      	str	r2, [r7, #12]
 8007dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 fa62 	bl	800028c <__aeabi_uldivmod>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4613      	mov	r3, r2
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd6:	d308      	bcc.n	8007dea <UART_SetConfig+0x2c2>
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dde:	d204      	bcs.n	8007dea <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de6:	60da      	str	r2, [r3, #12]
 8007de8:	e003      	b.n	8007df2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007df0:	e070      	b.n	8007ed4 <UART_SetConfig+0x3ac>
 8007df2:	e06f      	b.n	8007ed4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfc:	d13c      	bne.n	8007e78 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e00:	2200      	movs	r2, #0
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e0a:	f7fc fdb9 	bl	8004980 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e0e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d05e      	beq.n	8007ed4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	4a39      	ldr	r2, [pc, #228]	; (8007f00 <UART_SetConfig+0x3d8>)
 8007e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e28:	005a      	lsls	r2, r3, #1
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	085b      	lsrs	r3, r3, #1
 8007e30:	441a      	add	r2, r3
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3e:	2b0f      	cmp	r3, #15
 8007e40:	d916      	bls.n	8007e70 <UART_SetConfig+0x348>
 8007e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e48:	d212      	bcs.n	8007e70 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f023 030f 	bic.w	r3, r3, #15
 8007e52:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007e62:	4313      	orrs	r3, r2
 8007e64:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007e6c:	60da      	str	r2, [r3, #12]
 8007e6e:	e031      	b.n	8007ed4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007e76:	e02d      	b.n	8007ed4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	4693      	mov	fp, r2
 8007e80:	4650      	mov	r0, sl
 8007e82:	4659      	mov	r1, fp
 8007e84:	f7fc fd7c 	bl	8004980 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e88:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d021      	beq.n	8007ed4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	4a1a      	ldr	r2, [pc, #104]	; (8007f00 <UART_SetConfig+0x3d8>)
 8007e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	441a      	add	r2, r3
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d909      	bls.n	8007ece <UART_SetConfig+0x3a6>
 8007eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec0:	d205      	bcs.n	8007ece <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	e002      	b.n	8007ed4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	2200      	movs	r2, #0
 8007eee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ef0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3750      	adds	r7, #80	; 0x50
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efe:	bf00      	nop
 8007f00:	08009680 	.word	0x08009680

08007f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	f003 0310 	and.w	r3, r3, #16
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01a      	beq.n	800801a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008002:	d10a      	bne.n	800801a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	605a      	str	r2, [r3, #4]
  }
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b098      	sub	sp, #96	; 0x60
 800804c:	af02      	add	r7, sp, #8
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008058:	f7f8 fe26 	bl	8000ca8 <HAL_GetTick>
 800805c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b08      	cmp	r3, #8
 800806a:	d12f      	bne.n	80080cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800806c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008074:	2200      	movs	r2, #0
 8008076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f88e 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d022      	beq.n	80080cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800809a:	653b      	str	r3, [r7, #80]	; 0x50
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a4:	647b      	str	r3, [r7, #68]	; 0x44
 80080a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e063      	b.n	8008194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d149      	bne.n	800816e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e2:	2200      	movs	r2, #0
 80080e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f857 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d03c      	beq.n	800816e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	623b      	str	r3, [r7, #32]
   return(result);
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008108:	64fb      	str	r3, [r7, #76]	; 0x4c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008112:	633b      	str	r3, [r7, #48]	; 0x30
 8008114:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	60fb      	str	r3, [r7, #12]
   return(result);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	64bb      	str	r3, [r7, #72]	; 0x48
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008146:	61fa      	str	r2, [r7, #28]
 8008148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	69b9      	ldr	r1, [r7, #24]
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	617b      	str	r3, [r7, #20]
   return(result);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e5      	bne.n	8008126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e012      	b.n	8008194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3758      	adds	r7, #88	; 0x58
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	4613      	mov	r3, r2
 80081aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ac:	e049      	b.n	8008242 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b4:	d045      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b6:	f7f8 fd77 	bl	8000ca8 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <UART_WaitOnFlagUntilTimeout+0x30>
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e048      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d031      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d110      	bne.n	800820e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2208      	movs	r2, #8
 80081f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f95b 	bl	80084b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2208      	movs	r2, #8
 80081fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e029      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800821c:	d111      	bne.n	8008242 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f941 	bl	80084b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e00f      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4013      	ands	r3, r2
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	429a      	cmp	r2, r3
 8008250:	bf0c      	ite	eq
 8008252:	2301      	moveq	r3, #1
 8008254:	2300      	movne	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	429a      	cmp	r2, r3
 800825e:	d0a6      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800826c:	b480      	push	{r7}
 800826e:	b0a3      	sub	sp, #140	; 0x8c
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	88fa      	ldrh	r2, [r7, #6]
 800828c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d10e      	bne.n	80082be <UART_Start_Receive_IT+0x52>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <UART_Start_Receive_IT+0x48>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80082ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082b2:	e02d      	b.n	8008310 <UART_Start_Receive_IT+0xa4>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	22ff      	movs	r2, #255	; 0xff
 80082b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082bc:	e028      	b.n	8008310 <UART_Start_Receive_IT+0xa4>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10d      	bne.n	80082e2 <UART_Start_Receive_IT+0x76>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <UART_Start_Receive_IT+0x6c>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	22ff      	movs	r2, #255	; 0xff
 80082d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082d6:	e01b      	b.n	8008310 <UART_Start_Receive_IT+0xa4>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	227f      	movs	r2, #127	; 0x7f
 80082dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082e0:	e016      	b.n	8008310 <UART_Start_Receive_IT+0xa4>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ea:	d10d      	bne.n	8008308 <UART_Start_Receive_IT+0x9c>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <UART_Start_Receive_IT+0x92>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	227f      	movs	r2, #127	; 0x7f
 80082f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082fc:	e008      	b.n	8008310 <UART_Start_Receive_IT+0xa4>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	223f      	movs	r2, #63	; 0x3f
 8008302:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008306:	e003      	b.n	8008310 <UART_Start_Receive_IT+0xa4>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2222      	movs	r2, #34	; 0x22
 800831c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008344:	673a      	str	r2, [r7, #112]	; 0x70
 8008346:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800834a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e3      	bne.n	8008320 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008360:	d14f      	bne.n	8008402 <UART_Start_Receive_IT+0x196>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008368:	88fa      	ldrh	r2, [r7, #6]
 800836a:	429a      	cmp	r2, r3
 800836c:	d349      	bcc.n	8008402 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008376:	d107      	bne.n	8008388 <UART_Start_Receive_IT+0x11c>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d103      	bne.n	8008388 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a47      	ldr	r2, [pc, #284]	; (80084a0 <UART_Start_Receive_IT+0x234>)
 8008384:	675a      	str	r2, [r3, #116]	; 0x74
 8008386:	e002      	b.n	800838e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a46      	ldr	r2, [pc, #280]	; (80084a4 <UART_Start_Receive_IT+0x238>)
 800838c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01a      	beq.n	80083cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e4      	bne.n	8008396 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3308      	adds	r3, #8
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3308      	adds	r3, #8
 80083ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80083ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e5      	bne.n	80083cc <UART_Start_Receive_IT+0x160>
 8008400:	e046      	b.n	8008490 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840a:	d107      	bne.n	800841c <UART_Start_Receive_IT+0x1b0>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4a24      	ldr	r2, [pc, #144]	; (80084a8 <UART_Start_Receive_IT+0x23c>)
 8008418:	675a      	str	r2, [r3, #116]	; 0x74
 800841a:	e002      	b.n	8008422 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a23      	ldr	r2, [pc, #140]	; (80084ac <UART_Start_Receive_IT+0x240>)
 8008420:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d019      	beq.n	800845e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800843e:	677b      	str	r3, [r7, #116]	; 0x74
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
 800844a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800844e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e6      	bne.n	800842a <UART_Start_Receive_IT+0x1be>
 800845c:	e018      	b.n	8008490 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	613b      	str	r3, [r7, #16]
   return(result);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f043 0320 	orr.w	r3, r3, #32
 8008472:	67bb      	str	r3, [r7, #120]	; 0x78
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800847c:	623b      	str	r3, [r7, #32]
 800847e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	69f9      	ldr	r1, [r7, #28]
 8008482:	6a3a      	ldr	r2, [r7, #32]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	61bb      	str	r3, [r7, #24]
   return(result);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	378c      	adds	r7, #140	; 0x8c
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	0800903d 	.word	0x0800903d
 80084a4:	08008ccd 	.word	0x08008ccd
 80084a8:	08008b09 	.word	0x08008b09
 80084ac:	08008945 	.word	0x08008945

080084b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b095      	sub	sp, #84	; 0x54
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d6:	643b      	str	r3, [r7, #64]	; 0x40
 80084d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e6      	bne.n	80084b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008500:	f023 0301 	bic.w	r3, r3, #1
 8008504:	64bb      	str	r3, [r7, #72]	; 0x48
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800850e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e3      	bne.n	80084ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008526:	2b01      	cmp	r3, #1
 8008528:	d118      	bne.n	800855c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	60bb      	str	r3, [r7, #8]
   return(result);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 0310 	bic.w	r3, r3, #16
 800853e:	647b      	str	r3, [r7, #68]	; 0x44
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6979      	ldr	r1, [r7, #20]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	613b      	str	r3, [r7, #16]
   return(result);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e6      	bne.n	800852a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008570:	bf00      	nop
 8008572:	3754      	adds	r7, #84	; 0x54
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff faae 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b08f      	sub	sp, #60	; 0x3c
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	2b21      	cmp	r3, #33	; 0x21
 80085b8:	d14c      	bne.n	8008654 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d132      	bne.n	800862c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e6      	bne.n	80085c6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	60bb      	str	r3, [r7, #8]
   return(result);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860c:	633b      	str	r3, [r7, #48]	; 0x30
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6979      	ldr	r1, [r7, #20]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	613b      	str	r3, [r7, #16]
   return(result);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e6      	bne.n	80085f8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800862a:	e013      	b.n	8008654 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008630:	781a      	ldrb	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008648:	b29b      	uxth	r3, r3
 800864a:	3b01      	subs	r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008654:	bf00      	nop
 8008656:	373c      	adds	r7, #60	; 0x3c
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b091      	sub	sp, #68	; 0x44
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866e:	2b21      	cmp	r3, #33	; 0x21
 8008670:	d151      	bne.n	8008716 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d132      	bne.n	80086e4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	e853 3f00 	ldrex	r3, [r3]
 800868a:	623b      	str	r3, [r7, #32]
   return(result);
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008692:	63bb      	str	r3, [r7, #56]	; 0x38
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	633b      	str	r3, [r7, #48]	; 0x30
 800869e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a4:	e841 2300 	strex	r3, r2, [r1]
 80086a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e6      	bne.n	800867e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	69b9      	ldr	r1, [r7, #24]
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	617b      	str	r3, [r7, #20]
   return(result);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e6      	bne.n	80086b0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80086e2:	e018      	b.n	8008716 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80086ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fe:	1c9a      	adds	r2, r3, #2
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008716:	bf00      	nop
 8008718:	3744      	adds	r7, #68	; 0x44
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008722:	b480      	push	{r7}
 8008724:	b091      	sub	sp, #68	; 0x44
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008730:	2b21      	cmp	r3, #33	; 0x21
 8008732:	d160      	bne.n	80087f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800873a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800873c:	e057      	b.n	80087ee <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d133      	bne.n	80087b2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	623b      	str	r3, [r7, #32]
   return(result);
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008760:	63bb      	str	r3, [r7, #56]	; 0x38
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3308      	adds	r3, #8
 8008768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800876a:	633a      	str	r2, [r7, #48]	; 0x30
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e5      	bne.n	800874a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	60fb      	str	r3, [r7, #12]
   return(result);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	69b9      	ldr	r1, [r7, #24]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	617b      	str	r3, [r7, #20]
   return(result);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e6      	bne.n	800877e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80087b0:	e021      	b.n	80087f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d013      	beq.n	80087e8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80087e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087ea:	3b01      	subs	r3, #1
 80087ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1a4      	bne.n	800873e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80087f4:	e7ff      	b.n	80087f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80087f6:	bf00      	nop
 80087f8:	3744      	adds	r7, #68	; 0x44
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008802:	b480      	push	{r7}
 8008804:	b091      	sub	sp, #68	; 0x44
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	2b21      	cmp	r3, #33	; 0x21
 8008812:	d165      	bne.n	80088e0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800881a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800881c:	e05c      	b.n	80088d8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008824:	b29b      	uxth	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d133      	bne.n	8008892 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	61fb      	str	r3, [r7, #28]
   return(result);
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800884a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60bb      	str	r3, [r7, #8]
   return(result);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008872:	633b      	str	r3, [r7, #48]	; 0x30
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	613b      	str	r3, [r7, #16]
   return(result);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008890:	e026      	b.n	80088e0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b00      	cmp	r3, #0
 800889e:	d018      	beq.n	80088d2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088b4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80088d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80088d4:	3b01      	subs	r3, #1
 80088d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80088d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d19f      	bne.n	800881e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80088de:	e7ff      	b.n	80088e0 <UART_TxISR_16BIT_FIFOEN+0xde>
 80088e0:	bf00      	nop
 80088e2:	3744      	adds	r7, #68	; 0x44
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	60bb      	str	r3, [r7, #8]
   return(result);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6979      	ldr	r1, [r7, #20]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	613b      	str	r3, [r7, #16]
   return(result);
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e6      	bne.n	80088f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff f8d7 	bl	8007ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800893a:	bf00      	nop
 800893c:	3720      	adds	r7, #32
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b09c      	sub	sp, #112	; 0x70
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008952:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895c:	2b22      	cmp	r3, #34	; 0x22
 800895e:	f040 80c3 	bne.w	8008ae8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800896c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008970:	b2d9      	uxtb	r1, r3
 8008972:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008976:	b2da      	uxtb	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897c:	400a      	ands	r2, r1
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 80a6 	bne.w	8008af8 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80089cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e6      	bne.n	80089ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3308      	adds	r3, #8
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	667b      	str	r3, [r7, #100]	; 0x64
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3308      	adds	r3, #8
 80089fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e5      	bne.n	80089de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a35      	ldr	r2, [pc, #212]	; (8008b00 <UART_RxISR_8BIT+0x1bc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d024      	beq.n	8008a7a <UART_RxISR_8BIT+0x136>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a33      	ldr	r2, [pc, #204]	; (8008b04 <UART_RxISR_8BIT+0x1c0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01f      	beq.n	8008a7a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d018      	beq.n	8008a7a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	623b      	str	r3, [r7, #32]
   return(result);
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a66:	633b      	str	r3, [r7, #48]	; 0x30
 8008a68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e6      	bne.n	8008a48 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d12e      	bne.n	8008ae0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f023 0310 	bic.w	r3, r3, #16
 8008a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	69b9      	ldr	r1, [r7, #24]
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d103      	bne.n	8008ad0 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2210      	movs	r2, #16
 8008ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff f819 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ade:	e00b      	b.n	8008af8 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7f7 fd63 	bl	80005ac <HAL_UART_RxCpltCallback>
}
 8008ae6:	e007      	b.n	8008af8 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0208 	orr.w	r2, r2, #8
 8008af6:	619a      	str	r2, [r3, #24]
}
 8008af8:	bf00      	nop
 8008afa:	3770      	adds	r7, #112	; 0x70
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	44002400 	.word	0x44002400
 8008b04:	54002400 	.word	0x54002400

08008b08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b09c      	sub	sp, #112	; 0x70
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b20:	2b22      	cmp	r3, #34	; 0x22
 8008b22:	f040 80c3 	bne.w	8008cac <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008b3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b3e:	4013      	ands	r3, r2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4a:	1c9a      	adds	r2, r3, #2
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 80a6 	bne.w	8008cbc <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b84:	667b      	str	r3, [r7, #100]	; 0x64
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8008b90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e6      	bne.n	8008b70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bc2:	643a      	str	r2, [r7, #64]	; 0x40
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a35      	ldr	r2, [pc, #212]	; (8008cc4 <UART_RxISR_16BIT+0x1bc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d024      	beq.n	8008c3e <UART_RxISR_16BIT+0x136>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a33      	ldr	r2, [pc, #204]	; (8008cc8 <UART_RxISR_16BIT+0x1c0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d01f      	beq.n	8008c3e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d018      	beq.n	8008c3e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e6      	bne.n	8008c0c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d12e      	bne.n	8008ca4 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f023 0310 	bic.w	r3, r3, #16
 8008c60:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6979      	ldr	r1, [r7, #20]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	613b      	str	r3, [r7, #16]
   return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e6      	bne.n	8008c4c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f003 0310 	and.w	r3, r3, #16
 8008c88:	2b10      	cmp	r3, #16
 8008c8a:	d103      	bne.n	8008c94 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2210      	movs	r2, #16
 8008c92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7fe ff37 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ca2:	e00b      	b.n	8008cbc <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7f7 fc81 	bl	80005ac <HAL_UART_RxCpltCallback>
}
 8008caa:	e007      	b.n	8008cbc <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	699a      	ldr	r2, [r3, #24]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0208 	orr.w	r2, r2, #8
 8008cba:	619a      	str	r2, [r3, #24]
}
 8008cbc:	bf00      	nop
 8008cbe:	3770      	adds	r7, #112	; 0x70
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	44002400 	.word	0x44002400
 8008cc8:	54002400 	.word	0x54002400

08008ccc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b0ac      	sub	sp, #176	; 0xb0
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d02:	2b22      	cmp	r3, #34	; 0x22
 8008d04:	f040 8187 	bne.w	8009016 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d12:	e12a      	b.n	8008f6a <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008d22:	b2d9      	uxtb	r1, r3
 8008d24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	400a      	ands	r2, r1
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d5e:	f003 0307 	and.w	r3, r3, #7
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d053      	beq.n	8008e0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d011      	beq.n	8008d96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2201      	movs	r2, #1
 8008d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8c:	f043 0201 	orr.w	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d011      	beq.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00b      	beq.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2202      	movs	r2, #2
 8008db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dbc:	f043 0204 	orr.w	r2, r3, #4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d011      	beq.n	8008df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00b      	beq.n	8008df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2204      	movs	r2, #4
 8008de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dec:	f043 0202 	orr.w	r2, r3, #2
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d006      	beq.n	8008e0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7fe fe7b 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f040 80a7 	bne.w	8008f6a <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e40:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008e44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e4      	bne.n	8008e1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8008e7c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e1      	bne.n	8008e52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a62      	ldr	r2, [pc, #392]	; (8009030 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d026      	beq.n	8008efa <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a60      	ldr	r2, [pc, #384]	; (8009034 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d021      	beq.n	8008efa <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01a      	beq.n	8008efa <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ee8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e4      	bne.n	8008ec4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d130      	bne.n	8008f64 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e4      	bne.n	8008f08 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b10      	cmp	r3, #16
 8008f4a:	d103      	bne.n	8008f54 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2210      	movs	r2, #16
 8008f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fe fdd7 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
 8008f62:	e002      	b.n	8008f6a <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7f7 fb21 	bl	80005ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f6a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d006      	beq.n	8008f80 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8008f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f47f aeca 	bne.w	8008d14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d049      	beq.n	8009026 <UART_RxISR_8BIT_FIFOEN+0x35a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f98:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d242      	bcs.n	8009026 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e3      	bne.n	8008fa0 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8008fdc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f043 0320 	orr.w	r3, r3, #32
 8008ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6979      	ldr	r1, [r7, #20]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	613b      	str	r3, [r7, #16]
   return(result);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009014:	e007      	b.n	8009026 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	699a      	ldr	r2, [r3, #24]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0208 	orr.w	r2, r2, #8
 8009024:	619a      	str	r2, [r3, #24]
}
 8009026:	bf00      	nop
 8009028:	37b0      	adds	r7, #176	; 0xb0
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	44002400 	.word	0x44002400
 8009034:	54002400 	.word	0x54002400
 8009038:	08008945 	.word	0x08008945

0800903c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b0ae      	sub	sp, #184	; 0xb8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800904a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009072:	2b22      	cmp	r3, #34	; 0x22
 8009074:	f040 818b 	bne.w	800938e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800907e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009082:	e12e      	b.n	80092e2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009096:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800909a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800909e:	4013      	ands	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d053      	beq.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d011      	beq.n	800910a <UART_RxISR_16BIT_FIFOEN+0xce>
 80090e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2201      	movs	r2, #1
 80090f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009100:	f043 0201 	orr.w	r2, r3, #1
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800910a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d011      	beq.n	800913a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00b      	beq.n	800913a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2202      	movs	r2, #2
 8009128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009130:	f043 0204 	orr.w	r2, r3, #4
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800913a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d011      	beq.n	800916a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2204      	movs	r2, #4
 8009158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009160:	f043 0202 	orr.w	r2, r3, #2
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009170:	2b00      	cmp	r3, #0
 8009172:	d006      	beq.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7fe fcc1 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009188:	b29b      	uxth	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	f040 80a9 	bne.w	80092e2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800919e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	461a      	mov	r2, r3
 80091ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80091c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e2      	bne.n	8009190 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3308      	adds	r3, #8
 80091ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80091f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e1      	bne.n	80091ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a62      	ldr	r2, [pc, #392]	; (80093a8 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d026      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0x236>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a60      	ldr	r2, [pc, #384]	; (80093ac <UART_RxISR_16BIT_FIFOEN+0x370>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d021      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01a      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800924a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800924c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800925e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009260:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800926c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e4      	bne.n	800923c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009276:	2b01      	cmp	r3, #1
 8009278:	d130      	bne.n	80092dc <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092a2:	647b      	str	r3, [r7, #68]	; 0x44
 80092a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e4      	bne.n	8009280 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d103      	bne.n	80092cc <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2210      	movs	r2, #16
 80092ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7fe fc1b 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
 80092da:	e002      	b.n	80092e2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7f7 f965 	bl	80005ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092e2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d006      	beq.n	80092f8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 80092ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f aec6 	bne.w	8009084 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009302:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009306:	2b00      	cmp	r3, #0
 8009308:	d049      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0x362>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009310:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009314:	429a      	cmp	r2, r3
 8009316:	d242      	bcs.n	800939e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	623b      	str	r3, [r7, #32]
   return(result);
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800932e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800933c:	633a      	str	r2, [r7, #48]	; 0x30
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e3      	bne.n	8009318 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a17      	ldr	r2, [pc, #92]	; (80093b0 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009354:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	60fb      	str	r3, [r7, #12]
   return(result);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f043 0320 	orr.w	r3, r3, #32
 800936a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	69b9      	ldr	r1, [r7, #24]
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	617b      	str	r3, [r7, #20]
   return(result);
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e4      	bne.n	8009356 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800938c:	e007      	b.n	800939e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0208 	orr.w	r2, r2, #8
 800939c:	619a      	str	r2, [r3, #24]
}
 800939e:	bf00      	nop
 80093a0:	37b8      	adds	r7, #184	; 0xb8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	44002400 	.word	0x44002400
 80093ac:	54002400 	.word	0x54002400
 80093b0:	08008b09 	.word	0x08008b09

080093b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_UARTEx_DisableFifoMode+0x16>
 8009402:	2302      	movs	r3, #2
 8009404:	e027      	b.n	8009456 <HAL_UARTEx_DisableFifoMode+0x66>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2224      	movs	r2, #36	; 0x24
 8009412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009434:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009476:	2302      	movs	r3, #2
 8009478:	e02d      	b.n	80094d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2224      	movs	r2, #36	; 0x24
 8009486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0201 	bic.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f850 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e02d      	b.n	8009552 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	; 0x24
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f812 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800957c:	e031      	b.n	80095e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800957e:	2308      	movs	r3, #8
 8009580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009582:	2308      	movs	r3, #8
 8009584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	0e5b      	lsrs	r3, r3, #25
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	0f5b      	lsrs	r3, r3, #29
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	7b3a      	ldrb	r2, [r7, #12]
 80095aa:	4911      	ldr	r1, [pc, #68]	; (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ac:	5c8a      	ldrb	r2, [r1, r2]
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095b2:	7b3a      	ldrb	r2, [r7, #12]
 80095b4:	490f      	ldr	r1, [pc, #60]	; (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	7b7a      	ldrb	r2, [r7, #13]
 80095c8:	4909      	ldr	r1, [pc, #36]	; (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ca:	5c8a      	ldrb	r2, [r1, r2]
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095d0:	7b7a      	ldrb	r2, [r7, #13]
 80095d2:	4908      	ldr	r1, [pc, #32]	; (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	08009698 	.word	0x08009698
 80095f4:	080096a0 	.word	0x080096a0

080095f8 <memset>:
 80095f8:	4402      	add	r2, r0
 80095fa:	4603      	mov	r3, r0
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d100      	bne.n	8009602 <memset+0xa>
 8009600:	4770      	bx	lr
 8009602:	f803 1b01 	strb.w	r1, [r3], #1
 8009606:	e7f9      	b.n	80095fc <memset+0x4>

08009608 <__libc_init_array>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	4d0d      	ldr	r5, [pc, #52]	; (8009640 <__libc_init_array+0x38>)
 800960c:	2600      	movs	r6, #0
 800960e:	4c0d      	ldr	r4, [pc, #52]	; (8009644 <__libc_init_array+0x3c>)
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	42a6      	cmp	r6, r4
 8009616:	d109      	bne.n	800962c <__libc_init_array+0x24>
 8009618:	4d0b      	ldr	r5, [pc, #44]	; (8009648 <__libc_init_array+0x40>)
 800961a:	2600      	movs	r6, #0
 800961c:	4c0b      	ldr	r4, [pc, #44]	; (800964c <__libc_init_array+0x44>)
 800961e:	f000 f817 	bl	8009650 <_init>
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	42a6      	cmp	r6, r4
 8009628:	d105      	bne.n	8009636 <__libc_init_array+0x2e>
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009630:	3601      	adds	r6, #1
 8009632:	4798      	blx	r3
 8009634:	e7ee      	b.n	8009614 <__libc_init_array+0xc>
 8009636:	f855 3b04 	ldr.w	r3, [r5], #4
 800963a:	3601      	adds	r6, #1
 800963c:	4798      	blx	r3
 800963e:	e7f2      	b.n	8009626 <__libc_init_array+0x1e>
 8009640:	080096b0 	.word	0x080096b0
 8009644:	080096b0 	.word	0x080096b0
 8009648:	080096b0 	.word	0x080096b0
 800964c:	080096b4 	.word	0x080096b4

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
